
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.38 (git sha1 543faed9c8c, clang++ 17.0.6 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Liberty frontend: /home/ceyhun/.volare/sky130A/libs.ref/sky130_fd_sc_hd/lib/sky130_fd_sc_hd__tt_025C_1v80.lib
Imported 428 cell types from liberty file.

2. Executing Verilog-2005 frontend: /openlane/semi_cpu_top/src/InstructionMemory.v
Parsing SystemVerilog input from `/openlane/semi_cpu_top/src/InstructionMemory.v' to AST representation.
Storing AST representation for module `$abstract\InstructionMemory'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: /openlane/semi_cpu_top/src/semi_cpu_top.v
Parsing SystemVerilog input from `/openlane/semi_cpu_top/src/semi_cpu_top.v' to AST representation.
Storing AST representation for module `$abstract\semi_cpu_top'.
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: /openlane/semi_cpu_top/src/RegisterFile.v
Parsing SystemVerilog input from `/openlane/semi_cpu_top/src/RegisterFile.v' to AST representation.
Storing AST representation for module `$abstract\RegisterFile'.
Successfully finished Verilog frontend.

5. Executing Verilog-2005 frontend: /openlane/semi_cpu_top/src/ALU.v
Parsing SystemVerilog input from `/openlane/semi_cpu_top/src/ALU.v' to AST representation.
Storing AST representation for module `$abstract\ALU'.
Successfully finished Verilog frontend.

6. Executing Verilog-2005 frontend: /openlane/semi_cpu_top/src/InstructionDecoder.v
Parsing SystemVerilog input from `/openlane/semi_cpu_top/src/InstructionDecoder.v' to AST representation.
Storing AST representation for module `$abstract\InstructionDecoder'.
Successfully finished Verilog frontend.

7. Executing Verilog-2005 frontend: /openlane/semi_cpu_top/src/seven_segment_display_controller.v
Parsing SystemVerilog input from `/openlane/semi_cpu_top/src/seven_segment_display_controller.v' to AST representation.
Warning: Literal has a width of 2 bit, but value requires 3 bit. (/openlane/semi_cpu_top/src/seven_segment_display_controller.v:41)
Storing AST representation for module `$abstract\seven_segment_display_controller'.
Successfully finished Verilog frontend.

8. Executing Verilog-2005 frontend: /openlane/semi_cpu_top/src/ProgramCounter.v
Parsing SystemVerilog input from `/openlane/semi_cpu_top/src/ProgramCounter.v' to AST representation.
Storing AST representation for module `$abstract\ProgramCounter'.
Successfully finished Verilog frontend.

9. Executing HIERARCHY pass (managing design hierarchy).

10. Executing AST frontend in derive mode using pre-parsed AST for module `\semi_cpu_top'.
Generating RTLIL representation for module `\semi_cpu_top'.

10.1. Analyzing design hierarchy..
Top module:  \semi_cpu_top

10.2. Executing AST frontend in derive mode using pre-parsed AST for module `\seven_segment_display_controller'.
Generating RTLIL representation for module `\seven_segment_display_controller'.

10.3. Executing AST frontend in derive mode using pre-parsed AST for module `\ALU'.
Generating RTLIL representation for module `\ALU'.

10.4. Executing AST frontend in derive mode using pre-parsed AST for module `\RegisterFile'.
Generating RTLIL representation for module `\RegisterFile'.
Warning: Replacing memory \registers with list of registers. See /openlane/semi_cpu_top/src/RegisterFile.v:20

10.5. Executing AST frontend in derive mode using pre-parsed AST for module `\InstructionDecoder'.
Generating RTLIL representation for module `\InstructionDecoder'.

10.6. Executing AST frontend in derive mode using pre-parsed AST for module `\InstructionMemory'.
Generating RTLIL representation for module `\InstructionMemory'.

10.7. Executing AST frontend in derive mode using pre-parsed AST for module `\ProgramCounter'.
Generating RTLIL representation for module `\ProgramCounter'.

10.8. Analyzing design hierarchy..
Top module:  \semi_cpu_top
Used module:     \seven_segment_display_controller
Used module:     \ALU
Used module:     \RegisterFile
Used module:     \InstructionDecoder
Used module:     \InstructionMemory
Used module:     \ProgramCounter

10.9. Analyzing design hierarchy..
Top module:  \semi_cpu_top
Used module:     \seven_segment_display_controller
Used module:     \ALU
Used module:     \RegisterFile
Used module:     \InstructionDecoder
Used module:     \InstructionMemory
Used module:     \ProgramCounter
Removing unused module `$abstract\ProgramCounter'.
Removing unused module `$abstract\seven_segment_display_controller'.
Removing unused module `$abstract\InstructionDecoder'.
Removing unused module `$abstract\ALU'.
Removing unused module `$abstract\RegisterFile'.
Removing unused module `$abstract\semi_cpu_top'.
Removing unused module `$abstract\InstructionMemory'.
Removed 7 unused modules.

11. Generating Graphviz representation of design.
Writing dot description to `/openlane/semi_cpu_top/runs/RUN_2025.06.08_09.20.56/tmp/synthesis/hierarchy.dot'.
Dumping module semi_cpu_top to page 1.
Renaming module semi_cpu_top to semi_cpu_top.

12. Executing TRIBUF pass.

13. Executing HIERARCHY pass (managing design hierarchy).

13.1. Analyzing design hierarchy..
Top module:  \semi_cpu_top
Used module:     \seven_segment_display_controller
Used module:     \ALU
Used module:     \RegisterFile
Used module:     \InstructionDecoder
Used module:     \InstructionMemory
Used module:     \ProgramCounter

13.2. Analyzing design hierarchy..
Top module:  \semi_cpu_top
Used module:     \seven_segment_display_controller
Used module:     \ALU
Used module:     \RegisterFile
Used module:     \InstructionDecoder
Used module:     \InstructionMemory
Used module:     \ProgramCounter
Removed 0 unused modules.

14. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

15. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/openlane/semi_cpu_top/src/semi_cpu_top.v:79$2 in module semi_cpu_top.
Removed 1 dead cases from process $proc$/openlane/semi_cpu_top/src/InstructionDecoder.v:15$44 in module InstructionDecoder.
Marked 1 switch rules as full_case in process $proc$/openlane/semi_cpu_top/src/InstructionDecoder.v:15$44 in module InstructionDecoder.
Removed 1 dead cases from process $proc$/openlane/semi_cpu_top/src/RegisterFile.v:0$41 in module RegisterFile.
Marked 1 switch rules as full_case in process $proc$/openlane/semi_cpu_top/src/RegisterFile.v:0$41 in module RegisterFile.
Removed 1 dead cases from process $proc$/openlane/semi_cpu_top/src/RegisterFile.v:0$38 in module RegisterFile.
Marked 1 switch rules as full_case in process $proc$/openlane/semi_cpu_top/src/RegisterFile.v:0$38 in module RegisterFile.
Marked 4 switch rules as full_case in process $proc$/openlane/semi_cpu_top/src/RegisterFile.v:17$24 in module RegisterFile.
Removed 1 dead cases from process $proc$/openlane/semi_cpu_top/src/ALU.v:9$14 in module ALU.
Marked 1 switch rules as full_case in process $proc$/openlane/semi_cpu_top/src/ALU.v:9$14 in module ALU.
Removed 1 dead cases from process $proc$/openlane/semi_cpu_top/src/seven_segment_display_controller.v:36$7 in module seven_segment_display_controller.
Marked 1 switch rules as full_case in process $proc$/openlane/semi_cpu_top/src/seven_segment_display_controller.v:36$7 in module seven_segment_display_controller.
Removed 1 dead cases from process $proc$/openlane/semi_cpu_top/src/seven_segment_display_controller.v:13$3 in module seven_segment_display_controller.
Marked 1 switch rules as full_case in process $proc$/openlane/semi_cpu_top/src/seven_segment_display_controller.v:13$3 in module seven_segment_display_controller.
Marked 2 switch rules as full_case in process $proc$/openlane/semi_cpu_top/src/ProgramCounter.v:8$66 in module ProgramCounter.
Removed a total of 6 dead cases.

16. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 22 assignments to connections.

17. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\seven_segment_display_controller.$proc$/openlane/semi_cpu_top/src/seven_segment_display_controller.v:10$13'.
  Set init value: \digit_select = 2'00
Found init rule in `\seven_segment_display_controller.$proc$/openlane/semi_cpu_top/src/seven_segment_display_controller.v:9$12'.
  Set init value: \clk_divider = 20'00000000000000000000

18. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \rst in `\semi_cpu_top.$proc$/openlane/semi_cpu_top/src/semi_cpu_top.v:79$2'.
Found async reset \rst in `\RegisterFile.$proc$/openlane/semi_cpu_top/src/RegisterFile.v:17$24'.
Found async reset \rst in `\ProgramCounter.$proc$/openlane/semi_cpu_top/src/ProgramCounter.v:8$66'.

19. Executing PROC_ROM pass (convert switches to ROMs).
Converted 1 switch.
<suppressed ~13 debug messages>

20. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\semi_cpu_top.$proc$/openlane/semi_cpu_top/src/semi_cpu_top.v:79$2'.
     1/1: $0\last_result[31:0]
Creating decoders for process `\InstructionMemory.$proc$/openlane/semi_cpu_top/src/InstructionMemory.v:0$59'.
Creating decoders for process `\InstructionDecoder.$proc$/openlane/semi_cpu_top/src/InstructionDecoder.v:15$44'.
     1/6: $1\we[0:0]
     2/6: $1\ALUop[2:0]
     3/6: $1\immediate[31:0]
     4/6: $1\wa[4:0]
     5/6: $1\ra2[4:0]
     6/6: $1\ra1[4:0]
Creating decoders for process `\RegisterFile.$proc$/openlane/semi_cpu_top/src/RegisterFile.v:0$41'.
     1/1: $1$mem2reg_rd$\registers$/openlane/semi_cpu_top/src/RegisterFile.v:30$23_DATA[31:0]$43
Creating decoders for process `\RegisterFile.$proc$/openlane/semi_cpu_top/src/RegisterFile.v:0$38'.
     1/1: $1$mem2reg_rd$\registers$/openlane/semi_cpu_top/src/RegisterFile.v:29$22_DATA[31:0]$40
Creating decoders for process `\RegisterFile.$proc$/openlane/semi_cpu_top/src/RegisterFile.v:17$24'.
     1/39: $3$mem2reg_wr$\registers$/openlane/semi_cpu_top/src/RegisterFile.v:24$21_ADDR[4:0]$32
     2/39: $3$mem2reg_wr$\registers$/openlane/semi_cpu_top/src/RegisterFile.v:24$21_DATA[31:0]$33
     3/39: $2$mem2reg_wr$\registers$/openlane/semi_cpu_top/src/RegisterFile.v:24$21_DATA[31:0]$30
     4/39: $2$mem2reg_wr$\registers$/openlane/semi_cpu_top/src/RegisterFile.v:24$21_ADDR[4:0]$29
     5/39: $1$mem2reg_wr$\registers$/openlane/semi_cpu_top/src/RegisterFile.v:24$21_DATA[31:0]$28
     6/39: $1$mem2reg_wr$\registers$/openlane/semi_cpu_top/src/RegisterFile.v:24$21_ADDR[4:0]$27
     7/39: $1\i[31:0]
     8/39: $0\registers[31][31:0]
     9/39: $0\registers[30][31:0]
    10/39: $0\registers[29][31:0]
    11/39: $0\registers[28][31:0]
    12/39: $0\registers[27][31:0]
    13/39: $0\registers[26][31:0]
    14/39: $0\registers[25][31:0]
    15/39: $0\registers[24][31:0]
    16/39: $0\registers[23][31:0]
    17/39: $0\registers[22][31:0]
    18/39: $0\registers[21][31:0]
    19/39: $0\registers[20][31:0]
    20/39: $0\registers[19][31:0]
    21/39: $0\registers[18][31:0]
    22/39: $0\registers[17][31:0]
    23/39: $0\registers[16][31:0]
    24/39: $0\registers[15][31:0]
    25/39: $0\registers[14][31:0]
    26/39: $0\registers[13][31:0]
    27/39: $0\registers[12][31:0]
    28/39: $0\registers[11][31:0]
    29/39: $0\registers[10][31:0]
    30/39: $0\registers[9][31:0]
    31/39: $0\registers[8][31:0]
    32/39: $0\registers[7][31:0]
    33/39: $0\registers[6][31:0]
    34/39: $0\registers[5][31:0]
    35/39: $0\registers[4][31:0]
    36/39: $0\registers[3][31:0]
    37/39: $0\registers[2][31:0]
    38/39: $0\registers[1][31:0]
    39/39: $0\registers[0][31:0]
Creating decoders for process `\ALU.$proc$/openlane/semi_cpu_top/src/ALU.v:9$14'.
     1/1: $1\result[31:0]
Creating decoders for process `\seven_segment_display_controller.$proc$/openlane/semi_cpu_top/src/seven_segment_display_controller.v:10$13'.
Creating decoders for process `\seven_segment_display_controller.$proc$/openlane/semi_cpu_top/src/seven_segment_display_controller.v:9$12'.
Creating decoders for process `\seven_segment_display_controller.$proc$/openlane/semi_cpu_top/src/seven_segment_display_controller.v:36$7'.
     1/3: $1\an_out[3:0]
     2/3: $0\clk_divider[19:0]
     3/3: $0\digit_select[1:0]
Creating decoders for process `\seven_segment_display_controller.$proc$/openlane/semi_cpu_top/src/seven_segment_display_controller.v:13$3'.
     1/1: $1\seg_out[6:0]
Creating decoders for process `\ProgramCounter.$proc$/openlane/semi_cpu_top/src/ProgramCounter.v:8$66'.
     1/1: $0\pc_out[2:0]

21. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\InstructionMemory.$memwr$\mem$/openlane/semi_cpu_top/src/InstructionMemory.v:11$45_EN' from process `\InstructionMemory.$proc$/openlane/semi_cpu_top/src/InstructionMemory.v:0$59'.
No latch inferred for signal `\InstructionMemory.$memwr$\mem$/openlane/semi_cpu_top/src/InstructionMemory.v:14$46_EN' from process `\InstructionMemory.$proc$/openlane/semi_cpu_top/src/InstructionMemory.v:0$59'.
No latch inferred for signal `\InstructionMemory.$memwr$\mem$/openlane/semi_cpu_top/src/InstructionMemory.v:17$47_EN' from process `\InstructionMemory.$proc$/openlane/semi_cpu_top/src/InstructionMemory.v:0$59'.
No latch inferred for signal `\InstructionMemory.$memwr$\mem$/openlane/semi_cpu_top/src/InstructionMemory.v:20$48_EN' from process `\InstructionMemory.$proc$/openlane/semi_cpu_top/src/InstructionMemory.v:0$59'.
No latch inferred for signal `\InstructionMemory.$memwr$\mem$/openlane/semi_cpu_top/src/InstructionMemory.v:23$49_EN' from process `\InstructionMemory.$proc$/openlane/semi_cpu_top/src/InstructionMemory.v:0$59'.
No latch inferred for signal `\InstructionMemory.$memwr$\mem$/openlane/semi_cpu_top/src/InstructionMemory.v:26$50_EN' from process `\InstructionMemory.$proc$/openlane/semi_cpu_top/src/InstructionMemory.v:0$59'.
No latch inferred for signal `\InstructionDecoder.\ra1' from process `\InstructionDecoder.$proc$/openlane/semi_cpu_top/src/InstructionDecoder.v:15$44'.
No latch inferred for signal `\InstructionDecoder.\ra2' from process `\InstructionDecoder.$proc$/openlane/semi_cpu_top/src/InstructionDecoder.v:15$44'.
No latch inferred for signal `\InstructionDecoder.\wa' from process `\InstructionDecoder.$proc$/openlane/semi_cpu_top/src/InstructionDecoder.v:15$44'.
No latch inferred for signal `\InstructionDecoder.\we' from process `\InstructionDecoder.$proc$/openlane/semi_cpu_top/src/InstructionDecoder.v:15$44'.
No latch inferred for signal `\InstructionDecoder.\immediate' from process `\InstructionDecoder.$proc$/openlane/semi_cpu_top/src/InstructionDecoder.v:15$44'.
No latch inferred for signal `\InstructionDecoder.\ALUop' from process `\InstructionDecoder.$proc$/openlane/semi_cpu_top/src/InstructionDecoder.v:15$44'.
No latch inferred for signal `\RegisterFile.$mem2reg_rd$\registers$/openlane/semi_cpu_top/src/RegisterFile.v:30$23_DATA' from process `\RegisterFile.$proc$/openlane/semi_cpu_top/src/RegisterFile.v:0$41'.
No latch inferred for signal `\RegisterFile.$mem2reg_rd$\registers$/openlane/semi_cpu_top/src/RegisterFile.v:29$22_DATA' from process `\RegisterFile.$proc$/openlane/semi_cpu_top/src/RegisterFile.v:0$38'.
No latch inferred for signal `\ALU.\result' from process `\ALU.$proc$/openlane/semi_cpu_top/src/ALU.v:9$14'.
No latch inferred for signal `\seven_segment_display_controller.\seg_out' from process `\seven_segment_display_controller.$proc$/openlane/semi_cpu_top/src/seven_segment_display_controller.v:13$3'.

22. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\semi_cpu_top.\last_result' using process `\semi_cpu_top.$proc$/openlane/semi_cpu_top/src/semi_cpu_top.v:79$2'.
  created $adff cell `$procdff$991' with positive edge clock and positive level reset.
Creating register for signal `\RegisterFile.\i' using process `\RegisterFile.$proc$/openlane/semi_cpu_top/src/RegisterFile.v:17$24'.
  created $adff cell `$procdff$992' with positive edge clock and positive level reset.
Creating register for signal `\RegisterFile.\registers[0]' using process `\RegisterFile.$proc$/openlane/semi_cpu_top/src/RegisterFile.v:17$24'.
  created $adff cell `$procdff$993' with positive edge clock and positive level reset.
Creating register for signal `\RegisterFile.\registers[1]' using process `\RegisterFile.$proc$/openlane/semi_cpu_top/src/RegisterFile.v:17$24'.
  created $adff cell `$procdff$994' with positive edge clock and positive level reset.
Creating register for signal `\RegisterFile.\registers[2]' using process `\RegisterFile.$proc$/openlane/semi_cpu_top/src/RegisterFile.v:17$24'.
  created $adff cell `$procdff$995' with positive edge clock and positive level reset.
Creating register for signal `\RegisterFile.\registers[3]' using process `\RegisterFile.$proc$/openlane/semi_cpu_top/src/RegisterFile.v:17$24'.
  created $adff cell `$procdff$996' with positive edge clock and positive level reset.
Creating register for signal `\RegisterFile.\registers[4]' using process `\RegisterFile.$proc$/openlane/semi_cpu_top/src/RegisterFile.v:17$24'.
  created $adff cell `$procdff$997' with positive edge clock and positive level reset.
Creating register for signal `\RegisterFile.\registers[5]' using process `\RegisterFile.$proc$/openlane/semi_cpu_top/src/RegisterFile.v:17$24'.
  created $adff cell `$procdff$998' with positive edge clock and positive level reset.
Creating register for signal `\RegisterFile.\registers[6]' using process `\RegisterFile.$proc$/openlane/semi_cpu_top/src/RegisterFile.v:17$24'.
  created $adff cell `$procdff$999' with positive edge clock and positive level reset.
Creating register for signal `\RegisterFile.\registers[7]' using process `\RegisterFile.$proc$/openlane/semi_cpu_top/src/RegisterFile.v:17$24'.
  created $adff cell `$procdff$1000' with positive edge clock and positive level reset.
Creating register for signal `\RegisterFile.\registers[8]' using process `\RegisterFile.$proc$/openlane/semi_cpu_top/src/RegisterFile.v:17$24'.
  created $adff cell `$procdff$1001' with positive edge clock and positive level reset.
Creating register for signal `\RegisterFile.\registers[9]' using process `\RegisterFile.$proc$/openlane/semi_cpu_top/src/RegisterFile.v:17$24'.
  created $adff cell `$procdff$1002' with positive edge clock and positive level reset.
Creating register for signal `\RegisterFile.\registers[10]' using process `\RegisterFile.$proc$/openlane/semi_cpu_top/src/RegisterFile.v:17$24'.
  created $adff cell `$procdff$1003' with positive edge clock and positive level reset.
Creating register for signal `\RegisterFile.\registers[11]' using process `\RegisterFile.$proc$/openlane/semi_cpu_top/src/RegisterFile.v:17$24'.
  created $adff cell `$procdff$1004' with positive edge clock and positive level reset.
Creating register for signal `\RegisterFile.\registers[12]' using process `\RegisterFile.$proc$/openlane/semi_cpu_top/src/RegisterFile.v:17$24'.
  created $adff cell `$procdff$1005' with positive edge clock and positive level reset.
Creating register for signal `\RegisterFile.\registers[13]' using process `\RegisterFile.$proc$/openlane/semi_cpu_top/src/RegisterFile.v:17$24'.
  created $adff cell `$procdff$1006' with positive edge clock and positive level reset.
Creating register for signal `\RegisterFile.\registers[14]' using process `\RegisterFile.$proc$/openlane/semi_cpu_top/src/RegisterFile.v:17$24'.
  created $adff cell `$procdff$1007' with positive edge clock and positive level reset.
Creating register for signal `\RegisterFile.\registers[15]' using process `\RegisterFile.$proc$/openlane/semi_cpu_top/src/RegisterFile.v:17$24'.
  created $adff cell `$procdff$1008' with positive edge clock and positive level reset.
Creating register for signal `\RegisterFile.\registers[16]' using process `\RegisterFile.$proc$/openlane/semi_cpu_top/src/RegisterFile.v:17$24'.
  created $adff cell `$procdff$1009' with positive edge clock and positive level reset.
Creating register for signal `\RegisterFile.\registers[17]' using process `\RegisterFile.$proc$/openlane/semi_cpu_top/src/RegisterFile.v:17$24'.
  created $adff cell `$procdff$1010' with positive edge clock and positive level reset.
Creating register for signal `\RegisterFile.\registers[18]' using process `\RegisterFile.$proc$/openlane/semi_cpu_top/src/RegisterFile.v:17$24'.
  created $adff cell `$procdff$1011' with positive edge clock and positive level reset.
Creating register for signal `\RegisterFile.\registers[19]' using process `\RegisterFile.$proc$/openlane/semi_cpu_top/src/RegisterFile.v:17$24'.
  created $adff cell `$procdff$1012' with positive edge clock and positive level reset.
Creating register for signal `\RegisterFile.\registers[20]' using process `\RegisterFile.$proc$/openlane/semi_cpu_top/src/RegisterFile.v:17$24'.
  created $adff cell `$procdff$1013' with positive edge clock and positive level reset.
Creating register for signal `\RegisterFile.\registers[21]' using process `\RegisterFile.$proc$/openlane/semi_cpu_top/src/RegisterFile.v:17$24'.
  created $adff cell `$procdff$1014' with positive edge clock and positive level reset.
Creating register for signal `\RegisterFile.\registers[22]' using process `\RegisterFile.$proc$/openlane/semi_cpu_top/src/RegisterFile.v:17$24'.
  created $adff cell `$procdff$1015' with positive edge clock and positive level reset.
Creating register for signal `\RegisterFile.\registers[23]' using process `\RegisterFile.$proc$/openlane/semi_cpu_top/src/RegisterFile.v:17$24'.
  created $adff cell `$procdff$1016' with positive edge clock and positive level reset.
Creating register for signal `\RegisterFile.\registers[24]' using process `\RegisterFile.$proc$/openlane/semi_cpu_top/src/RegisterFile.v:17$24'.
  created $adff cell `$procdff$1017' with positive edge clock and positive level reset.
Creating register for signal `\RegisterFile.\registers[25]' using process `\RegisterFile.$proc$/openlane/semi_cpu_top/src/RegisterFile.v:17$24'.
  created $adff cell `$procdff$1018' with positive edge clock and positive level reset.
Creating register for signal `\RegisterFile.\registers[26]' using process `\RegisterFile.$proc$/openlane/semi_cpu_top/src/RegisterFile.v:17$24'.
  created $adff cell `$procdff$1019' with positive edge clock and positive level reset.
Creating register for signal `\RegisterFile.\registers[27]' using process `\RegisterFile.$proc$/openlane/semi_cpu_top/src/RegisterFile.v:17$24'.
  created $adff cell `$procdff$1020' with positive edge clock and positive level reset.
Creating register for signal `\RegisterFile.\registers[28]' using process `\RegisterFile.$proc$/openlane/semi_cpu_top/src/RegisterFile.v:17$24'.
  created $adff cell `$procdff$1021' with positive edge clock and positive level reset.
Creating register for signal `\RegisterFile.\registers[29]' using process `\RegisterFile.$proc$/openlane/semi_cpu_top/src/RegisterFile.v:17$24'.
  created $adff cell `$procdff$1022' with positive edge clock and positive level reset.
Creating register for signal `\RegisterFile.\registers[30]' using process `\RegisterFile.$proc$/openlane/semi_cpu_top/src/RegisterFile.v:17$24'.
  created $adff cell `$procdff$1023' with positive edge clock and positive level reset.
Creating register for signal `\RegisterFile.\registers[31]' using process `\RegisterFile.$proc$/openlane/semi_cpu_top/src/RegisterFile.v:17$24'.
  created $adff cell `$procdff$1024' with positive edge clock and positive level reset.
Creating register for signal `\RegisterFile.$mem2reg_wr$\registers$/openlane/semi_cpu_top/src/RegisterFile.v:24$21_ADDR' using process `\RegisterFile.$proc$/openlane/semi_cpu_top/src/RegisterFile.v:17$24'.
  created $adff cell `$procdff$1025' with positive edge clock and positive level reset.
Creating register for signal `\RegisterFile.$mem2reg_wr$\registers$/openlane/semi_cpu_top/src/RegisterFile.v:24$21_DATA' using process `\RegisterFile.$proc$/openlane/semi_cpu_top/src/RegisterFile.v:17$24'.
  created $adff cell `$procdff$1026' with positive edge clock and positive level reset.
Creating register for signal `\seven_segment_display_controller.\digit_select' using process `\seven_segment_display_controller.$proc$/openlane/semi_cpu_top/src/seven_segment_display_controller.v:36$7'.
  created $dff cell `$procdff$1027' with positive edge clock.
Creating register for signal `\seven_segment_display_controller.\an_out' using process `\seven_segment_display_controller.$proc$/openlane/semi_cpu_top/src/seven_segment_display_controller.v:36$7'.
  created $dff cell `$procdff$1028' with positive edge clock.
Creating register for signal `\seven_segment_display_controller.\clk_divider' using process `\seven_segment_display_controller.$proc$/openlane/semi_cpu_top/src/seven_segment_display_controller.v:36$7'.
  created $dff cell `$procdff$1029' with positive edge clock.
Creating register for signal `\ProgramCounter.\pc_out' using process `\ProgramCounter.$proc$/openlane/semi_cpu_top/src/ProgramCounter.v:8$66'.
  created $adff cell `$procdff$1030' with positive edge clock and positive level reset.

23. Executing PROC_MEMWR pass (convert process memory writes to cells).

24. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\semi_cpu_top.$proc$/openlane/semi_cpu_top/src/semi_cpu_top.v:79$2'.
Removing empty process `semi_cpu_top.$proc$/openlane/semi_cpu_top/src/semi_cpu_top.v:79$2'.
Removing empty process `InstructionMemory.$proc$/openlane/semi_cpu_top/src/InstructionMemory.v:0$59'.
Found and cleaned up 1 empty switch in `\InstructionDecoder.$proc$/openlane/semi_cpu_top/src/InstructionDecoder.v:15$44'.
Removing empty process `InstructionDecoder.$proc$/openlane/semi_cpu_top/src/InstructionDecoder.v:15$44'.
Found and cleaned up 1 empty switch in `\RegisterFile.$proc$/openlane/semi_cpu_top/src/RegisterFile.v:0$41'.
Removing empty process `RegisterFile.$proc$/openlane/semi_cpu_top/src/RegisterFile.v:0$41'.
Found and cleaned up 1 empty switch in `\RegisterFile.$proc$/openlane/semi_cpu_top/src/RegisterFile.v:0$38'.
Removing empty process `RegisterFile.$proc$/openlane/semi_cpu_top/src/RegisterFile.v:0$38'.
Found and cleaned up 3 empty switches in `\RegisterFile.$proc$/openlane/semi_cpu_top/src/RegisterFile.v:17$24'.
Removing empty process `RegisterFile.$proc$/openlane/semi_cpu_top/src/RegisterFile.v:17$24'.
Found and cleaned up 1 empty switch in `\ALU.$proc$/openlane/semi_cpu_top/src/ALU.v:9$14'.
Removing empty process `ALU.$proc$/openlane/semi_cpu_top/src/ALU.v:9$14'.
Removing empty process `seven_segment_display_controller.$proc$/openlane/semi_cpu_top/src/seven_segment_display_controller.v:10$13'.
Removing empty process `seven_segment_display_controller.$proc$/openlane/semi_cpu_top/src/seven_segment_display_controller.v:9$12'.
Found and cleaned up 3 empty switches in `\seven_segment_display_controller.$proc$/openlane/semi_cpu_top/src/seven_segment_display_controller.v:36$7'.
Removing empty process `seven_segment_display_controller.$proc$/openlane/semi_cpu_top/src/seven_segment_display_controller.v:36$7'.
Found and cleaned up 1 empty switch in `\seven_segment_display_controller.$proc$/openlane/semi_cpu_top/src/seven_segment_display_controller.v:13$3'.
Removing empty process `seven_segment_display_controller.$proc$/openlane/semi_cpu_top/src/seven_segment_display_controller.v:13$3'.
Found and cleaned up 2 empty switches in `\ProgramCounter.$proc$/openlane/semi_cpu_top/src/ProgramCounter.v:8$66'.
Removing empty process `ProgramCounter.$proc$/openlane/semi_cpu_top/src/ProgramCounter.v:8$66'.
Cleaned up 14 empty switches.

25. Executing CHECK pass (checking for obvious problems).
Checking module semi_cpu_top...
Checking module InstructionMemory...
Checking module InstructionDecoder...
Checking module RegisterFile...
Checking module ALU...
Checking module seven_segment_display_controller...
Checking module ProgramCounter...
Found and reported 0 problems.

26. Executing OPT_EXPR pass (perform const folding).
Optimizing module semi_cpu_top.
Optimizing module InstructionMemory.
Optimizing module InstructionDecoder.
<suppressed ~6 debug messages>
Optimizing module RegisterFile.
<suppressed ~6 debug messages>
Optimizing module ALU.
<suppressed ~1 debug messages>
Optimizing module seven_segment_display_controller.
<suppressed ~5 debug messages>
Optimizing module ProgramCounter.

27. Executing FLATTEN pass (flatten design).
Deleting now unused module InstructionMemory.
Deleting now unused module InstructionDecoder.
Deleting now unused module RegisterFile.
Deleting now unused module ALU.
Deleting now unused module seven_segment_display_controller.
Deleting now unused module ProgramCounter.
<suppressed ~6 debug messages>

28. Executing OPT_EXPR pass (perform const folding).
Optimizing module semi_cpu_top.

29. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \semi_cpu_top..
Removed 9 unused cells and 186 unused wires.
<suppressed ~14 debug messages>

30. Executing OPT pass (performing simple optimizations).

30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module semi_cpu_top.

30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\semi_cpu_top'.
<suppressed ~129 debug messages>
Removed a total of 43 cells.

30.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \semi_cpu_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 32/33 on $pmux $flatten\rf.$procmux$129.
    dead port 32/33 on $pmux $flatten\rf.$procmux$162.
Removed 2 multiplexer ports.
<suppressed ~47 debug messages>

30.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \semi_cpu_top.
    New ctrl vector for $pmux cell $flatten\id.$procmux$102: { $auto$opt_reduce.cc:134:opt_pmux$1034 $auto$opt_reduce.cc:134:opt_pmux$1032 }
    New ctrl vector for $pmux cell $flatten\id.$procmux$75: { $auto$opt_reduce.cc:134:opt_pmux$1038 $auto$opt_reduce.cc:134:opt_pmux$1036 }
    New ctrl vector for $pmux cell $flatten\id.$procmux$111: { $auto$opt_reduce.cc:134:opt_pmux$1042 $auto$opt_reduce.cc:134:opt_pmux$1040 }
    New ctrl vector for $pmux cell $flatten\alu.$procmux$965: { $auto$opt_reduce.cc:134:opt_pmux$1044 $flatten\alu.$procmux$971_CMP $flatten\alu.$procmux$970_CMP $flatten\alu.$procmux$969_CMP $flatten\alu.$procmux$968_CMP $flatten\alu.$procmux$967_CMP $flatten\alu.$procmux$966_CMP }
    New ctrl vector for $pmux cell $flatten\id.$procmux$93: { $auto$opt_reduce.cc:134:opt_pmux$1048 $auto$opt_reduce.cc:134:opt_pmux$1046 }
    New ctrl vector for $pmux cell $flatten\id.$procmux$120: { $auto$opt_reduce.cc:134:opt_pmux$1052 $auto$opt_reduce.cc:134:opt_pmux$1050 }
  Optimizing cells in module \semi_cpu_top.
Performed a total of 6 changes.

30.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\semi_cpu_top'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

30.6. Executing OPT_DFF pass (perform DFF optimizations).

30.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \semi_cpu_top..
Removed 5 unused cells and 52 unused wires.
<suppressed ~7 debug messages>

30.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module semi_cpu_top.

30.9. Rerunning OPT passes. (Maybe there is more to do..)

30.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \semi_cpu_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~46 debug messages>

30.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \semi_cpu_top.
Performed a total of 0 changes.

30.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\semi_cpu_top'.
Removed a total of 0 cells.

30.13. Executing OPT_DFF pass (perform DFF optimizations).

30.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \semi_cpu_top..

30.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module semi_cpu_top.

30.16. Finished OPT passes. (There is nothing left to do.)

31. Executing FSM pass (extract and optimize FSM).

31.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking semi_cpu_top.ssdc.an_out as FSM state register:
    Register is connected to module port.
    Users of register don't seem to benefit from recoding.

31.2. Executing FSM_EXTRACT pass (extracting FSM from design).

31.3. Executing FSM_OPT pass (simple optimizations of FSMs).

31.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \semi_cpu_top..

31.5. Executing FSM_OPT pass (simple optimizations of FSMs).

31.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

31.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

31.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

32. Executing OPT pass (performing simple optimizations).

32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module semi_cpu_top.

32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\semi_cpu_top'.
Removed a total of 0 cells.

32.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \semi_cpu_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~46 debug messages>

32.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \semi_cpu_top.
Performed a total of 0 changes.

32.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\semi_cpu_top'.
Removed a total of 0 cells.

32.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$991 ($adff) from module semi_cpu_top (D = \rf.wd, Q = \last_result).
Adding SRST signal on $flatten\ssdc.$procdff$1029 ($dff) from module semi_cpu_top (D = $flatten\ssdc.$add$/openlane/semi_cpu_top/src/seven_segment_display_controller.v:37$8_Y [19:0], Q = \ssdc.clk_divider, rval = 20'00000000000000000000).
Adding EN signal on $flatten\ssdc.$procdff$1027 ($dff) from module semi_cpu_top (D = $flatten\ssdc.$procmux$981_Y, Q = \ssdc.digit_select).
Adding SRST signal on $auto$ff.cc:266:slice$1055 ($dffe) from module semi_cpu_top (D = $flatten\ssdc.$add$/openlane/semi_cpu_top/src/seven_segment_display_controller.v:40$10_Y [1:0], Q = \ssdc.digit_select, rval = 2'00).
Adding EN signal on $flatten\rf.$procdff$999 ($adff) from module semi_cpu_top (D = \rf.wd, Q = \rf.registers[6]).
Adding EN signal on $flatten\rf.$procdff$998 ($adff) from module semi_cpu_top (D = \rf.wd, Q = \rf.registers[5]).
Adding EN signal on $flatten\rf.$procdff$997 ($adff) from module semi_cpu_top (D = \rf.wd, Q = \rf.registers[4]).
Adding EN signal on $flatten\rf.$procdff$996 ($adff) from module semi_cpu_top (D = \rf.wd, Q = \rf.registers[3]).
Adding EN signal on $flatten\rf.$procdff$995 ($adff) from module semi_cpu_top (D = \rf.wd, Q = \rf.registers[2]).
Adding EN signal on $flatten\rf.$procdff$994 ($adff) from module semi_cpu_top (D = \rf.wd, Q = \rf.registers[1]).
Adding EN signal on $flatten\rf.$procdff$1024 ($adff) from module semi_cpu_top (D = \rf.wd, Q = \rf.registers[31]).
Adding EN signal on $flatten\rf.$procdff$1023 ($adff) from module semi_cpu_top (D = \rf.wd, Q = \rf.registers[30]).
Adding EN signal on $flatten\rf.$procdff$1022 ($adff) from module semi_cpu_top (D = \rf.wd, Q = \rf.registers[29]).
Adding EN signal on $flatten\rf.$procdff$1021 ($adff) from module semi_cpu_top (D = \rf.wd, Q = \rf.registers[28]).
Adding EN signal on $flatten\rf.$procdff$1020 ($adff) from module semi_cpu_top (D = \rf.wd, Q = \rf.registers[27]).
Adding EN signal on $flatten\rf.$procdff$1019 ($adff) from module semi_cpu_top (D = \rf.wd, Q = \rf.registers[26]).
Adding EN signal on $flatten\rf.$procdff$1018 ($adff) from module semi_cpu_top (D = \rf.wd, Q = \rf.registers[25]).
Adding EN signal on $flatten\rf.$procdff$1017 ($adff) from module semi_cpu_top (D = \rf.wd, Q = \rf.registers[24]).
Adding EN signal on $flatten\rf.$procdff$1016 ($adff) from module semi_cpu_top (D = \rf.wd, Q = \rf.registers[23]).
Adding EN signal on $flatten\rf.$procdff$1015 ($adff) from module semi_cpu_top (D = \rf.wd, Q = \rf.registers[22]).
Adding EN signal on $flatten\rf.$procdff$1014 ($adff) from module semi_cpu_top (D = \rf.wd, Q = \rf.registers[21]).
Adding EN signal on $flatten\rf.$procdff$1013 ($adff) from module semi_cpu_top (D = \rf.wd, Q = \rf.registers[20]).
Adding EN signal on $flatten\rf.$procdff$1012 ($adff) from module semi_cpu_top (D = \rf.wd, Q = \rf.registers[19]).
Adding EN signal on $flatten\rf.$procdff$1011 ($adff) from module semi_cpu_top (D = \rf.wd, Q = \rf.registers[18]).
Adding EN signal on $flatten\rf.$procdff$1010 ($adff) from module semi_cpu_top (D = \rf.wd, Q = \rf.registers[17]).
Adding EN signal on $flatten\rf.$procdff$1009 ($adff) from module semi_cpu_top (D = \rf.wd, Q = \rf.registers[16]).
Adding EN signal on $flatten\rf.$procdff$1008 ($adff) from module semi_cpu_top (D = \rf.wd, Q = \rf.registers[15]).
Adding EN signal on $flatten\rf.$procdff$1007 ($adff) from module semi_cpu_top (D = \rf.wd, Q = \rf.registers[14]).
Adding EN signal on $flatten\rf.$procdff$1006 ($adff) from module semi_cpu_top (D = \rf.wd, Q = \rf.registers[13]).
Adding EN signal on $flatten\rf.$procdff$1005 ($adff) from module semi_cpu_top (D = \rf.wd, Q = \rf.registers[12]).
Adding EN signal on $flatten\rf.$procdff$1004 ($adff) from module semi_cpu_top (D = \rf.wd, Q = \rf.registers[11]).
Adding EN signal on $flatten\rf.$procdff$1003 ($adff) from module semi_cpu_top (D = \rf.wd, Q = \rf.registers[10]).
Adding EN signal on $flatten\rf.$procdff$1002 ($adff) from module semi_cpu_top (D = \rf.wd, Q = \rf.registers[9]).
Adding EN signal on $flatten\rf.$procdff$1001 ($adff) from module semi_cpu_top (D = \rf.wd, Q = \rf.registers[8]).
Adding EN signal on $flatten\rf.$procdff$1000 ($adff) from module semi_cpu_top (D = \rf.wd, Q = \rf.registers[7]).
Adding EN signal on $flatten\pc.$procdff$1030 ($adff) from module semi_cpu_top (D = $flatten\pc.$procmux$987_Y, Q = \pc.pc_out).

32.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \semi_cpu_top..
Removed 98 unused cells and 98 unused wires.
<suppressed ~99 debug messages>

32.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module semi_cpu_top.

32.9. Rerunning OPT passes. (Maybe there is more to do..)

32.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \semi_cpu_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~12 debug messages>

32.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \semi_cpu_top.
Performed a total of 0 changes.

32.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\semi_cpu_top'.
Removed a total of 0 cells.

32.13. Executing OPT_DFF pass (perform DFF optimizations).

32.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \semi_cpu_top..

32.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module semi_cpu_top.

32.16. Finished OPT passes. (There is nothing left to do.)

33. Executing WREDUCE pass (reducing word size of cells).
Removed top 29 address bits (of 32) from memory init port semi_cpu_top.$flatten\im.$meminit$\mem$/openlane/semi_cpu_top/src/InstructionMemory.v:11$53 (im.mem).
Removed top 29 address bits (of 32) from memory init port semi_cpu_top.$flatten\im.$meminit$\mem$/openlane/semi_cpu_top/src/InstructionMemory.v:14$54 (im.mem).
Removed top 29 address bits (of 32) from memory init port semi_cpu_top.$flatten\im.$meminit$\mem$/openlane/semi_cpu_top/src/InstructionMemory.v:17$55 (im.mem).
Removed top 29 address bits (of 32) from memory init port semi_cpu_top.$flatten\im.$meminit$\mem$/openlane/semi_cpu_top/src/InstructionMemory.v:20$56 (im.mem).
Removed top 29 address bits (of 32) from memory init port semi_cpu_top.$flatten\im.$meminit$\mem$/openlane/semi_cpu_top/src/InstructionMemory.v:23$57 (im.mem).
Removed top 29 address bits (of 32) from memory init port semi_cpu_top.$flatten\im.$meminit$\mem$/openlane/semi_cpu_top/src/InstructionMemory.v:26$58 (im.mem).
Removed top 28 address bits (of 32) from memory init port semi_cpu_top.$flatten\ssdc.$auto$mem.cc:328:emit$72 ($flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70).
Removed top 31 bits (of 32) from port B of cell semi_cpu_top.$flatten\pc.$add$/openlane/semi_cpu_top/src/ProgramCounter.v:15$68 ($add).
Removed top 29 bits (of 32) from port Y of cell semi_cpu_top.$flatten\pc.$add$/openlane/semi_cpu_top/src/ProgramCounter.v:15$68 ($add).
Removed top 1 bits (of 3) from port B of cell semi_cpu_top.$flatten\id.$procmux$108_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell semi_cpu_top.$flatten\id.$procmux$107_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell semi_cpu_top.$flatten\id.$procmux$100_CMP0 ($eq).
Removed top 4 bits (of 5) from port B of cell semi_cpu_top.$flatten\rf.$procmux$921_CMP0 ($eq).
Removed top 3 bits (of 5) from port B of cell semi_cpu_top.$flatten\rf.$procmux$883_CMP0 ($eq).
Removed top 3 bits (of 5) from port B of cell semi_cpu_top.$flatten\rf.$procmux$846_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell semi_cpu_top.$flatten\rf.$procmux$810_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell semi_cpu_top.$flatten\rf.$procmux$775_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell semi_cpu_top.$flatten\rf.$procmux$741_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell semi_cpu_top.$flatten\rf.$procmux$708_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell semi_cpu_top.$flatten\rf.$procmux$676_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell semi_cpu_top.$flatten\rf.$procmux$645_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell semi_cpu_top.$flatten\rf.$procmux$615_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell semi_cpu_top.$flatten\rf.$procmux$586_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell semi_cpu_top.$flatten\rf.$procmux$558_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell semi_cpu_top.$flatten\rf.$procmux$531_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell semi_cpu_top.$flatten\rf.$procmux$505_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell semi_cpu_top.$flatten\rf.$procmux$480_CMP0 ($eq).
Removed top 4 bits (of 5) from port B of cell semi_cpu_top.$flatten\rf.$procmux$193_CMP0 ($eq).
Removed top 3 bits (of 5) from port B of cell semi_cpu_top.$flatten\rf.$procmux$192_CMP0 ($eq).
Removed top 3 bits (of 5) from port B of cell semi_cpu_top.$flatten\rf.$procmux$191_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell semi_cpu_top.$flatten\rf.$procmux$190_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell semi_cpu_top.$flatten\rf.$procmux$189_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell semi_cpu_top.$flatten\rf.$procmux$188_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell semi_cpu_top.$flatten\rf.$procmux$187_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell semi_cpu_top.$flatten\rf.$procmux$186_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell semi_cpu_top.$flatten\rf.$procmux$185_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell semi_cpu_top.$flatten\rf.$procmux$184_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell semi_cpu_top.$flatten\rf.$procmux$183_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell semi_cpu_top.$flatten\rf.$procmux$182_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell semi_cpu_top.$flatten\rf.$procmux$181_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell semi_cpu_top.$flatten\rf.$procmux$180_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell semi_cpu_top.$flatten\rf.$procmux$179_CMP0 ($eq).
Removed top 4 bits (of 5) from port B of cell semi_cpu_top.$flatten\rf.$procmux$160_CMP0 ($eq).
Removed top 3 bits (of 5) from port B of cell semi_cpu_top.$flatten\rf.$procmux$159_CMP0 ($eq).
Removed top 3 bits (of 5) from port B of cell semi_cpu_top.$flatten\rf.$procmux$158_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell semi_cpu_top.$flatten\rf.$procmux$157_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell semi_cpu_top.$flatten\rf.$procmux$156_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell semi_cpu_top.$flatten\rf.$procmux$155_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell semi_cpu_top.$flatten\rf.$procmux$154_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell semi_cpu_top.$flatten\rf.$procmux$153_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell semi_cpu_top.$flatten\rf.$procmux$152_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell semi_cpu_top.$flatten\rf.$procmux$151_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell semi_cpu_top.$flatten\rf.$procmux$150_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell semi_cpu_top.$flatten\rf.$procmux$149_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell semi_cpu_top.$flatten\rf.$procmux$148_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell semi_cpu_top.$flatten\rf.$procmux$147_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell semi_cpu_top.$flatten\rf.$procmux$146_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell semi_cpu_top.$flatten\alu.$procmux$972_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell semi_cpu_top.$flatten\alu.$procmux$971_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell semi_cpu_top.$flatten\alu.$procmux$970_CMP0 ($eq).
Removed top 1 bits (of 2) from port B of cell semi_cpu_top.$flatten\ssdc.$procmux$977_CMP0 ($eq).
Removed top 31 bits (of 32) from port B of cell semi_cpu_top.$flatten\ssdc.$add$/openlane/semi_cpu_top/src/seven_segment_display_controller.v:40$10 ($add).
Removed top 30 bits (of 32) from port Y of cell semi_cpu_top.$flatten\ssdc.$add$/openlane/semi_cpu_top/src/seven_segment_display_controller.v:40$10 ($add).
Removed top 4 bits (of 20) from port B of cell semi_cpu_top.$flatten\ssdc.$eq$/openlane/semi_cpu_top/src/seven_segment_display_controller.v:38$9 ($eq).
Removed top 31 bits (of 32) from port B of cell semi_cpu_top.$flatten\ssdc.$add$/openlane/semi_cpu_top/src/seven_segment_display_controller.v:37$8 ($add).
Removed top 12 bits (of 32) from port Y of cell semi_cpu_top.$flatten\ssdc.$add$/openlane/semi_cpu_top/src/seven_segment_display_controller.v:37$8 ($add).
Removed top 27 bits (of 32) from port B of cell semi_cpu_top.$flatten\ssdc.$shiftx$/openlane/semi_cpu_top/src/seven_segment_display_controller.v:0$6 ($shiftx).
Removed top 29 bits (of 32) from wire semi_cpu_top.$flatten\pc.$add$/openlane/semi_cpu_top/src/ProgramCounter.v:15$68_Y.
Removed top 12 bits (of 32) from wire semi_cpu_top.$flatten\ssdc.$add$/openlane/semi_cpu_top/src/seven_segment_display_controller.v:37$8_Y.
Removed top 30 bits (of 32) from wire semi_cpu_top.$flatten\ssdc.$add$/openlane/semi_cpu_top/src/seven_segment_display_controller.v:40$10_Y.
Removed top 21 bits (of 32) from wire semi_cpu_top.rd1.

34. Executing PEEPOPT pass (run peephole optimizers).

35. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \semi_cpu_top..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

36. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module semi_cpu_top:
  creating $macc model for $flatten\alu.$add$/openlane/semi_cpu_top/src/ALU.v:18$15 ($add).
  creating $macc model for $flatten\alu.$add$/openlane/semi_cpu_top/src/ALU.v:30$19 ($add).
  creating $macc model for $flatten\alu.$sub$/openlane/semi_cpu_top/src/ALU.v:21$16 ($sub).
  creating $macc model for $flatten\alu.$sub$/openlane/semi_cpu_top/src/ALU.v:33$20 ($sub).
  creating $macc model for $flatten\pc.$add$/openlane/semi_cpu_top/src/ProgramCounter.v:15$68 ($add).
  creating $macc model for $flatten\ssdc.$add$/openlane/semi_cpu_top/src/seven_segment_display_controller.v:37$8 ($add).
  creating $macc model for $flatten\ssdc.$add$/openlane/semi_cpu_top/src/seven_segment_display_controller.v:40$10 ($add).
  creating $alu model for $macc $flatten\ssdc.$add$/openlane/semi_cpu_top/src/seven_segment_display_controller.v:40$10.
  creating $alu model for $macc $flatten\ssdc.$add$/openlane/semi_cpu_top/src/seven_segment_display_controller.v:37$8.
  creating $alu model for $macc $flatten\pc.$add$/openlane/semi_cpu_top/src/ProgramCounter.v:15$68.
  creating $alu model for $macc $flatten\alu.$sub$/openlane/semi_cpu_top/src/ALU.v:33$20.
  creating $alu model for $macc $flatten\alu.$sub$/openlane/semi_cpu_top/src/ALU.v:21$16.
  creating $alu model for $macc $flatten\alu.$add$/openlane/semi_cpu_top/src/ALU.v:30$19.
  creating $alu model for $macc $flatten\alu.$add$/openlane/semi_cpu_top/src/ALU.v:18$15.
  creating $alu cell for $flatten\alu.$add$/openlane/semi_cpu_top/src/ALU.v:30$19: $auto$alumacc.cc:485:replace_alu$1155
  creating $alu cell for $flatten\alu.$add$/openlane/semi_cpu_top/src/ALU.v:18$15: $auto$alumacc.cc:485:replace_alu$1158
  creating $alu cell for $flatten\alu.$sub$/openlane/semi_cpu_top/src/ALU.v:21$16: $auto$alumacc.cc:485:replace_alu$1161
  creating $alu cell for $flatten\alu.$sub$/openlane/semi_cpu_top/src/ALU.v:33$20: $auto$alumacc.cc:485:replace_alu$1164
  creating $alu cell for $flatten\pc.$add$/openlane/semi_cpu_top/src/ProgramCounter.v:15$68: $auto$alumacc.cc:485:replace_alu$1167
  creating $alu cell for $flatten\ssdc.$add$/openlane/semi_cpu_top/src/seven_segment_display_controller.v:37$8: $auto$alumacc.cc:485:replace_alu$1170
  creating $alu cell for $flatten\ssdc.$add$/openlane/semi_cpu_top/src/seven_segment_display_controller.v:40$10: $auto$alumacc.cc:485:replace_alu$1173
  created 7 $alu and 0 $macc cells.

37. Executing SHARE pass (SAT-based resource sharing).
Found 3 cells in module semi_cpu_top that may be considered for resource sharing.
  Analyzing resource sharing options for $flatten\im.$memrd$\mem$/openlane/semi_cpu_top/src/InstructionMemory.v:29$51 ($memrd):
    Found 1 activation_patterns using ctrl signal \control.
    No candidates found.
  Analyzing resource sharing options for $flatten\alu.$shr$/openlane/semi_cpu_top/src/ALU.v:27$18 ($shr):
    Found 1 activation_patterns using ctrl signal $flatten\alu.$procmux$968_CMP.
    No candidates found.
  Analyzing resource sharing options for $flatten\alu.$shl$/openlane/semi_cpu_top/src/ALU.v:24$17 ($shl):
    Found 1 activation_patterns using ctrl signal $flatten\alu.$procmux$969_CMP.
    No candidates found.

38. Executing OPT pass (performing simple optimizations).

38.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module semi_cpu_top.

38.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\semi_cpu_top'.
Removed a total of 0 cells.

38.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \semi_cpu_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~12 debug messages>

38.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \semi_cpu_top.
Performed a total of 0 changes.

38.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\semi_cpu_top'.
Removed a total of 0 cells.

38.6. Executing OPT_DFF pass (perform DFF optimizations).

38.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \semi_cpu_top..

38.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module semi_cpu_top.

38.9. Finished OPT passes. (There is nothing left to do.)

39. Executing MEMORY pass.

39.1. Executing OPT_MEM pass (optimize memories).
semi_cpu_top.im.mem: removing const-0 lane 4
semi_cpu_top.im.mem: removing const-0 lane 5
semi_cpu_top.im.mem: removing const-0 lane 6
semi_cpu_top.im.mem: removing const-0 lane 7
semi_cpu_top.im.mem: removing const-0 lane 8
semi_cpu_top.im.mem: removing const-0 lane 9
semi_cpu_top.im.mem: removing const-0 lane 10
semi_cpu_top.im.mem: removing const-0 lane 11
semi_cpu_top.im.mem: removing const-0 lane 12
semi_cpu_top.im.mem: removing const-0 lane 13
semi_cpu_top.im.mem: removing const-0 lane 18
semi_cpu_top.im.mem: removing const-0 lane 21
Performed a total of 1 transformations.

39.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

39.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

39.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

39.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).
Checking read port `$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70'[0] in module `\semi_cpu_top': no output FF found.
Checking read port `\im.mem'[0] in module `\semi_cpu_top': no output FF found.
Checking read port address `$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70'[0] in module `\semi_cpu_top': no address FF found.
Checking read port address `\im.mem'[0] in module `\semi_cpu_top': address FF has async set and/or reset, not supported.

39.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \semi_cpu_top..

39.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

39.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

39.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \semi_cpu_top..

39.10. Executing MEMORY_COLLECT pass (generating $mem cells).

40. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \semi_cpu_top..

41. Executing OPT pass (performing simple optimizations).

41.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module semi_cpu_top.
<suppressed ~10 debug messages>

41.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\semi_cpu_top'.
Removed a total of 0 cells.

41.3. Executing OPT_DFF pass (perform DFF optimizations).

41.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \semi_cpu_top..
Removed 8 unused cells and 9 unused wires.
<suppressed ~9 debug messages>

41.5. Finished fast OPT passes.

42. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).
Mapping memory $flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70 in module \semi_cpu_top:
  created 16 $dff cells and 0 static cells of width 7.
  read interface: 0 $dff and 15 $mux cells.
  write interface: 0 write mux blocks.
Mapping memory \im.mem in module \semi_cpu_top:
  created 6 $dff cells and 0 static cells of width 20.
  read interface: 0 $dff and 7 $mux cells.
  write interface: 0 write mux blocks.

43. Executing OPT pass (performing simple optimizations).

43.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module semi_cpu_top.
<suppressed ~3 debug messages>

43.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\semi_cpu_top'.
Removed a total of 0 cells.

43.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \semi_cpu_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~12 debug messages>

43.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \semi_cpu_top.
    Consolidated identical input bits for $mux cell $memory\im.mem$rdmux[0][2][1]$1237:
      Old ports: A=20'01011001011011110000, B=20'11110100110100000101, Y=$memory\im.mem$rdmux[0][1][0]$b$1230
      New ports: A=2'10, B=2'01, Y={ $memory\im.mem$rdmux[0][1][0]$b$1230 [4] $memory\im.mem$rdmux[0][1][0]$b$1230 [0] }
      New connections: { $memory\im.mem$rdmux[0][1][0]$b$1230 [19:5] $memory\im.mem$rdmux[0][1][0]$b$1230 [3:1] } = { $memory\im.mem$rdmux[0][1][0]$b$1230 [0] 1'1 $memory\im.mem$rdmux[0][1][0]$b$1230 [0] 1'1 $memory\im.mem$rdmux[0][1][0]$b$1230 [4] $memory\im.mem$rdmux[0][1][0]$b$1230 [0] 1'0 $memory\im.mem$rdmux[0][1][0]$b$1230 [4] $memory\im.mem$rdmux[0][1][0]$b$1230 [0] 1'1 $memory\im.mem$rdmux[0][1][0]$b$1230 [4] $memory\im.mem$rdmux[0][1][0]$b$1230 [0] $memory\im.mem$rdmux[0][1][0]$b$1230 [4] $memory\im.mem$rdmux[0][1][0]$b$1230 [4] $memory\im.mem$rdmux[0][1][0]$b$1230 [4] 1'0 $memory\im.mem$rdmux[0][1][0]$b$1230 [0] 1'0 }
    Consolidated identical input bits for $mux cell $memory\im.mem$rdmux[0][2][0]$1234:
      Old ports: A=20'11001010000000001010, B=20'11001111000000001111, Y=$memory\im.mem$rdmux[0][1][0]$a$1229
      New ports: A=1'0, B=1'1, Y=$memory\im.mem$rdmux[0][1][0]$a$1229 [0]
      New connections: $memory\im.mem$rdmux[0][1][0]$a$1229 [19:1] = { 5'11001 $memory\im.mem$rdmux[0][1][0]$a$1229 [0] 1'1 $memory\im.mem$rdmux[0][1][0]$a$1229 [0] 9'000000001 $memory\im.mem$rdmux[0][1][0]$a$1229 [0] 1'1 }
    Consolidated identical input bits for $mux cell $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][3][6]$1219:
      Old ports: A=7'0110001, B=7'1000010, Y=$memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][3]$a$1199
      New ports: A=2'01, B=2'10, Y=$memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][3]$a$1199 [1:0]
      New connections: $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][3]$a$1199 [6:2] = { $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][3]$a$1199 [1:0] $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][3]$a$1199 [0] 2'00 }
    Consolidated identical input bits for $mux cell $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][3][5]$1216:
      Old ports: A=7'0001000, B=7'1100000, Y=$memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][2]$b$1197
      New ports: A=2'01, B=2'10, Y={ $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][2]$b$1197 [5] $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][2]$b$1197 [3] }
      New connections: { $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][2]$b$1197 [6] $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][2]$b$1197 [4] $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][2]$b$1197 [2:0] } = { $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][2]$b$1197 [5] 4'0000 }
    Consolidated identical input bits for $mux cell $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][3][4]$1213:
      Old ports: A=7'0000000, B=7'0000100, Y=$memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][2]$a$1196
      New ports: A=1'0, B=1'1, Y=$memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][2]$a$1196 [2]
      New connections: { $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][2]$a$1196 [6:3] $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][2]$a$1196 [1:0] } = 6'000000
    Consolidated identical input bits for $mux cell $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][3][3]$1210:
      Old ports: A=7'0100000, B=7'0001111, Y=$memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][1]$b$1194
      New ports: A=2'10, B=2'01, Y={ $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][1]$b$1194 [5] $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][1]$b$1194 [0] }
      New connections: { $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][1]$b$1194 [6] $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][1]$b$1194 [4:1] } = { 2'00 $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][1]$b$1194 [0] $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][1]$b$1194 [0] $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][1]$b$1194 [0] }
    Consolidated identical input bits for $mux cell $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][3][2]$1207:
      Old ports: A=7'1001100, B=7'0100100, Y=$memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][1]$a$1193
      New ports: A=2'01, B=2'10, Y={ $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][1]$a$1193 [5] $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][1]$a$1193 [3] }
      New connections: { $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][1]$a$1193 [6] $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][1]$a$1193 [4] $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][1]$a$1193 [2:0] } = { $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][1]$a$1193 [3] 4'0100 }
    Consolidated identical input bits for $mux cell $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][3][1]$1204:
      Old ports: A=7'0010010, B=7'0000110, Y=$memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][0]$b$1191
      New ports: A=2'10, B=2'01, Y={ $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][0]$b$1191 [4] $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][0]$b$1191 [2] }
      New connections: { $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][0]$b$1191 [6:5] $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][0]$b$1191 [3] $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][0]$b$1191 [1:0] } = 5'00010
    Consolidated identical input bits for $mux cell $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][3][0]$1201:
      Old ports: A=7'0000001, B=7'1001111, Y=$memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][0]$a$1190
      New ports: A=1'0, B=1'1, Y=$memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][0]$a$1190 [1]
      New connections: { $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][0]$a$1190 [6:2] $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][0]$a$1190 [0] } = { $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][0]$a$1190 [1] 2'00 $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][0]$a$1190 [1] $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][0]$a$1190 [1] 1'1 }
    Consolidated identical input bits for $mux cell $flatten\id.$procmux$93:
      Old ports: A=0, B={ \id.instruction [18] \id.instruction [18] \id.instruction [18] \id.instruction [18] \id.instruction [18] \id.instruction [18] \id.instruction [18] \id.instruction [18] \id.instruction [18] \id.instruction [18] \id.instruction [18] \id.instruction [18] \id.instruction [18] \id.instruction [18:0] }, Y=\alu.immediate
      New ports: A=19'0000000000000000000, B=\id.instruction [18:0], Y=\alu.immediate [18:0]
      New connections: \alu.immediate [31:19] = { \alu.immediate [18] \alu.immediate [18] \alu.immediate [18] \alu.immediate [18] \alu.immediate [18] \alu.immediate [18] \alu.immediate [18] \alu.immediate [18] \alu.immediate [18] \alu.immediate [18] \alu.immediate [18] \alu.immediate [18] \alu.immediate [18] }
    Consolidated identical input bits for $mux cell $flatten\im.$ternary$/openlane/semi_cpu_top/src/InstructionMemory.v:29$52:
      Old ports: A=0, B={ $flatten\im.$memrd$\mem$/openlane/semi_cpu_top/src/InstructionMemory.v:29$51_DATA [31:22] 1'0 $flatten\im.$memrd$\mem$/openlane/semi_cpu_top/src/InstructionMemory.v:29$51_DATA [20:19] 1'0 $flatten\im.$memrd$\mem$/openlane/semi_cpu_top/src/InstructionMemory.v:29$51_DATA [17:14] 10'0000000000 $flatten\im.$memrd$\mem$/openlane/semi_cpu_top/src/InstructionMemory.v:29$51_DATA [3:0] }, Y={ \instruction_tb [31:29] \id.instruction [28:0] }
      New ports: A=20'00000000000000000000, B={ $flatten\im.$memrd$\mem$/openlane/semi_cpu_top/src/InstructionMemory.v:29$51_DATA [31:22] $flatten\im.$memrd$\mem$/openlane/semi_cpu_top/src/InstructionMemory.v:29$51_DATA [20:19] $flatten\im.$memrd$\mem$/openlane/semi_cpu_top/src/InstructionMemory.v:29$51_DATA [17:14] $flatten\im.$memrd$\mem$/openlane/semi_cpu_top/src/InstructionMemory.v:29$51_DATA [3:0] }, Y={ \instruction_tb [31:29] \id.instruction [28:22] \id.instruction [20:19] \id.instruction [17:14] \id.instruction [3:0] }
      New connections: { \id.instruction [21] \id.instruction [18] \id.instruction [13:4] } = 12'000000000000
    Consolidated identical input bits for $mux cell $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][3][7]$1222:
      Old ports: A=7'0110000, B=7'0111000, Y=$memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][3]$b$1200
      New ports: A=1'0, B=1'1, Y=$memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][3]$b$1200 [3]
      New connections: { $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][3]$b$1200 [6:4] $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][3]$b$1200 [2:0] } = 6'011000
    Consolidated identical input bits for $mux cell $memory\im.mem$rdmux[0][2][2]$1240:
      Old ports: A=20'11000101000000000010, B=20'10011110110101010000, Y=$memory\im.mem$rdmux[0][1][1]$a$1232
      New ports: A=2'01, B=2'10, Y={ $memory\im.mem$rdmux[0][1][1]$a$1232 [4] $memory\im.mem$rdmux[0][1][1]$a$1232 [1] }
      New connections: { $memory\im.mem$rdmux[0][1][1]$a$1232 [19:5] $memory\im.mem$rdmux[0][1][1]$a$1232 [3:2] $memory\im.mem$rdmux[0][1][1]$a$1232 [0] } = { 1'1 $memory\im.mem$rdmux[0][1][1]$a$1232 [1] 1'0 $memory\im.mem$rdmux[0][1][1]$a$1232 [4] $memory\im.mem$rdmux[0][1][1]$a$1232 [4] 1'1 $memory\im.mem$rdmux[0][1][1]$a$1232 [4] $memory\im.mem$rdmux[0][1][1]$a$1232 [1] $memory\im.mem$rdmux[0][1][1]$a$1232 [4] $memory\im.mem$rdmux[0][1][1]$a$1232 [4] 1'0 $memory\im.mem$rdmux[0][1][1]$a$1232 [4] 1'0 $memory\im.mem$rdmux[0][1][1]$a$1232 [4] 4'0000 }
  Optimizing cells in module \semi_cpu_top.
    Consolidated identical input bits for $mux cell $memory\im.mem$rdmux[0][1][1]$1231:
      Old ports: A=$memory\im.mem$rdmux[0][1][1]$a$1232, B=20'x, Y=$memory\im.mem$rdmux[0][0][0]$b$1227
      New ports: A={ 1'1 $memory\im.mem$rdmux[0][1][1]$a$1232 [4] $memory\im.mem$rdmux[0][1][1]$a$1232 [1] 1'0 }, B=4'x, Y={ $memory\im.mem$rdmux[0][0][0]$b$1227 [14] $memory\im.mem$rdmux[0][0][0]$b$1227 [4] $memory\im.mem$rdmux[0][0][0]$b$1227 [1:0] }
      New connections: { $memory\im.mem$rdmux[0][0][0]$b$1227 [19:15] $memory\im.mem$rdmux[0][0][0]$b$1227 [13:5] $memory\im.mem$rdmux[0][0][0]$b$1227 [3:2] } = { $memory\im.mem$rdmux[0][0][0]$b$1227 [14] $memory\im.mem$rdmux[0][0][0]$b$1227 [1:0] $memory\im.mem$rdmux[0][0][0]$b$1227 [4] $memory\im.mem$rdmux[0][0][0]$b$1227 [4] $memory\im.mem$rdmux[0][0][0]$b$1227 [4] $memory\im.mem$rdmux[0][0][0]$b$1227 [1] $memory\im.mem$rdmux[0][0][0]$b$1227 [4] $memory\im.mem$rdmux[0][0][0]$b$1227 [4] $memory\im.mem$rdmux[0][0][0]$b$1227 [0] $memory\im.mem$rdmux[0][0][0]$b$1227 [4] $memory\im.mem$rdmux[0][0][0]$b$1227 [0] $memory\im.mem$rdmux[0][0][0]$b$1227 [4] $memory\im.mem$rdmux[0][0][0]$b$1227 [0] $memory\im.mem$rdmux[0][0][0]$b$1227 [0] $memory\im.mem$rdmux[0][0][0]$b$1227 [0] }
    Consolidated identical input bits for $mux cell $memory\im.mem$rdmux[0][1][0]$1228:
      Old ports: A=$memory\im.mem$rdmux[0][1][0]$a$1229, B=$memory\im.mem$rdmux[0][1][0]$b$1230, Y=$memory\im.mem$rdmux[0][0][0]$a$1226
      New ports: A={ 2'11 $memory\im.mem$rdmux[0][1][0]$a$1229 [0] 4'0001 $memory\im.mem$rdmux[0][1][0]$a$1229 [0] }, B={ $memory\im.mem$rdmux[0][1][0]$b$1230 [0] $memory\im.mem$rdmux[0][1][0]$b$1230 [4] $memory\im.mem$rdmux[0][1][0]$b$1230 [4] 1'1 $memory\im.mem$rdmux[0][1][0]$b$1230 [0] $memory\im.mem$rdmux[0][1][0]$b$1230 [4] 1'0 $memory\im.mem$rdmux[0][1][0]$b$1230 [0] }, Y={ $memory\im.mem$rdmux[0][0][0]$a$1226 [19] $memory\im.mem$rdmux[0][0][0]$a$1226 [15] $memory\im.mem$rdmux[0][0][0]$a$1226 [12] $memory\im.mem$rdmux[0][0][0]$a$1226 [10] $memory\im.mem$rdmux[0][0][0]$a$1226 [8] $memory\im.mem$rdmux[0][0][0]$a$1226 [4] $memory\im.mem$rdmux[0][0][0]$a$1226 [1:0] }
      New connections: { $memory\im.mem$rdmux[0][0][0]$a$1226 [18:16] $memory\im.mem$rdmux[0][0][0]$a$1226 [14:13] $memory\im.mem$rdmux[0][0][0]$a$1226 [11] $memory\im.mem$rdmux[0][0][0]$a$1226 [9] $memory\im.mem$rdmux[0][0][0]$a$1226 [7:5] $memory\im.mem$rdmux[0][0][0]$a$1226 [3:2] } = { 1'1 $memory\im.mem$rdmux[0][0][0]$a$1226 [8] $memory\im.mem$rdmux[0][0][0]$a$1226 [10] $memory\im.mem$rdmux[0][0][0]$a$1226 [0] $memory\im.mem$rdmux[0][0][0]$a$1226 [1] $memory\im.mem$rdmux[0][0][0]$a$1226 [8] $memory\im.mem$rdmux[0][0][0]$a$1226 [4] $memory\im.mem$rdmux[0][0][0]$a$1226 [4] $memory\im.mem$rdmux[0][0][0]$a$1226 [4] $memory\im.mem$rdmux[0][0][0]$a$1226 [4] $memory\im.mem$rdmux[0][0][0]$a$1226 [1:0] }
    Consolidated identical input bits for $mux cell $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][3]$1198:
      Old ports: A=$memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][3]$a$1199, B=$memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][3]$b$1200, Y=$memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][1][1]$b$1188
      New ports: A={ $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][3]$a$1199 [0] 1'0 $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][3]$a$1199 [1:0] }, B={ 1'1 $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][3]$b$1200 [3] 2'00 }, Y={ $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][1][1]$b$1188 [4:3] $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][1][1]$b$1188 [1:0] }
      New connections: { $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][1][1]$b$1188 [6:5] $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][1][1]$b$1188 [2] } = { $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][1][1]$b$1188 [1] $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][1][1]$b$1188 [4] 1'0 }
    Consolidated identical input bits for $mux cell $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][2]$1195:
      Old ports: A=$memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][2]$a$1196, B=$memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][2]$b$1197, Y=$memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][1][1]$a$1187
      New ports: A={ 2'00 $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][2]$a$1196 [2] }, B={ $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][2]$b$1197 [5] $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][2]$b$1197 [3] 1'0 }, Y={ $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][1][1]$a$1187 [5] $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][1][1]$a$1187 [3:2] }
      New connections: { $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][1][1]$a$1187 [6] $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][1][1]$a$1187 [4] $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][1][1]$a$1187 [1:0] } = { $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][1][1]$a$1187 [5] 3'000 }
    Consolidated identical input bits for $mux cell $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][1]$1192:
      Old ports: A=$memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][1]$a$1193, B=$memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][1]$b$1194, Y=$memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][1][0]$b$1185
      New ports: A={ $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][1]$a$1193 [3] $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][1]$a$1193 [5] $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][1]$a$1193 [3] 2'10 }, B={ 1'0 $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][1]$b$1194 [5] $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][1]$b$1194 [0] $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][1]$b$1194 [0] $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][1]$b$1194 [0] }, Y={ $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][1][0]$b$1185 [6:5] $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][1][0]$b$1185 [3:2] $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][1][0]$b$1185 [0] }
      New connections: { $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][1][0]$b$1185 [4] $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][1][0]$b$1185 [1] } = { 1'0 $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][1][0]$b$1185 [0] }
    Consolidated identical input bits for $mux cell $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][0]$1189:
      Old ports: A=$memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][0]$a$1190, B=$memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][0]$b$1191, Y=$memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][1][0]$a$1184
      New ports: A={ 1'0 $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][0]$a$1190 [1] $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][0]$a$1190 [1] $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][0]$a$1190 [1] 1'1 }, B={ $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][0]$b$1191 [4] 1'0 $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][2][0]$b$1191 [2] 2'10 }, Y=$memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][1][0]$a$1184 [4:0]
      New connections: $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][1][0]$a$1184 [6:5] = { $memory$flatten\ssdc.$auto$proc_rom.cc:150:do_switch$70$rdmux[0][1][0]$a$1184 [3] 1'0 }
    Consolidated identical input bits for $mux cell $flatten\id.$procmux$111:
      Old ports: A=\id.instruction [18:14], B=5'00000, Y=\rf.ra2
      New ports: A=\id.instruction [17:14], B=4'0000, Y=\rf.ra2 [3:0]
      New connections: \rf.ra2 [4] = 1'0
    Consolidated identical input bits for $mux cell $flatten\id.$procmux$120:
      Old ports: A=5'00000, B=\id.instruction [23:19], Y=\rf.ra1
      New ports: A=4'0000, B={ \id.instruction [23:22] \id.instruction [20:19] }, Y={ \rf.ra1 [4:3] \rf.ra1 [1:0] }
      New connections: \rf.ra1 [2] = 1'0
    Consolidated identical input bits for $mux cell $flatten\id.$procmux$93:
      Old ports: A=19'0000000000000000000, B=\id.instruction [18:0], Y=\alu.immediate [18:0]
      New ports: A=8'00000000, B={ \id.instruction [17:14] \id.instruction [3:0] }, Y={ \alu.immediate [17:14] \alu.immediate [3:0] }
      New connections: { \alu.immediate [18] \alu.immediate [13:4] } = 11'00000000000
  Optimizing cells in module \semi_cpu_top.
    Consolidated identical input bits for $mux cell $memory\im.mem$rdmux[0][0][0]$1225:
      Old ports: A=$memory\im.mem$rdmux[0][0][0]$a$1226, B=$memory\im.mem$rdmux[0][0][0]$b$1227, Y={ $flatten\im.$memrd$\mem$/openlane/semi_cpu_top/src/InstructionMemory.v:29$51_DATA [31:22] $flatten\im.$memrd$\mem$/openlane/semi_cpu_top/src/InstructionMemory.v:29$51_DATA [20:19] $flatten\im.$memrd$\mem$/openlane/semi_cpu_top/src/InstructionMemory.v:29$51_DATA [17:14] $flatten\im.$memrd$\mem$/openlane/semi_cpu_top/src/InstructionMemory.v:29$51_DATA [3:0] }
      New ports: A={ $memory\im.mem$rdmux[0][0][0]$a$1226 [19] 1'1 $memory\im.mem$rdmux[0][0][0]$a$1226 [8] $memory\im.mem$rdmux[0][0][0]$a$1226 [15] $memory\im.mem$rdmux[0][0][0]$a$1226 [0] $memory\im.mem$rdmux[0][0][0]$a$1226 [1] $memory\im.mem$rdmux[0][0][0]$a$1226 [12] $memory\im.mem$rdmux[0][0][0]$a$1226 [10] $memory\im.mem$rdmux[0][0][0]$a$1226 [8] $memory\im.mem$rdmux[0][0][0]$a$1226 [4] $memory\im.mem$rdmux[0][0][0]$a$1226 [4] $memory\im.mem$rdmux[0][0][0]$a$1226 [1] $memory\im.mem$rdmux[0][0][0]$a$1226 [1:0] }, B={ $memory\im.mem$rdmux[0][0][0]$b$1227 [14] $memory\im.mem$rdmux[0][0][0]$b$1227 [1:0] $memory\im.mem$rdmux[0][0][0]$b$1227 [4] $memory\im.mem$rdmux[0][0][0]$b$1227 [14] $memory\im.mem$rdmux[0][0][0]$b$1227 [4] $memory\im.mem$rdmux[0][0][0]$b$1227 [1] $memory\im.mem$rdmux[0][0][0]$b$1227 [4] $memory\im.mem$rdmux[0][0][0]$b$1227 [4] $memory\im.mem$rdmux[0][0][0]$b$1227 [0] $memory\im.mem$rdmux[0][0][0]$b$1227 [4] $memory\im.mem$rdmux[0][0][0]$b$1227 [0] $memory\im.mem$rdmux[0][0][0]$b$1227 [1:0] }, Y={ $flatten\im.$memrd$\mem$/openlane/semi_cpu_top/src/InstructionMemory.v:29$51_DATA [31:29] $flatten\im.$memrd$\mem$/openlane/semi_cpu_top/src/InstructionMemory.v:29$51_DATA [27:24] $flatten\im.$memrd$\mem$/openlane/semi_cpu_top/src/InstructionMemory.v:29$51_DATA [22] $flatten\im.$memrd$\mem$/openlane/semi_cpu_top/src/InstructionMemory.v:29$51_DATA [19] $flatten\im.$memrd$\mem$/openlane/semi_cpu_top/src/InstructionMemory.v:29$51_DATA [15:14] $flatten\im.$memrd$\mem$/openlane/semi_cpu_top/src/InstructionMemory.v:29$51_DATA [3] $flatten\im.$memrd$\mem$/openlane/semi_cpu_top/src/InstructionMemory.v:29$51_DATA [1:0] }
      New connections: { $flatten\im.$memrd$\mem$/openlane/semi_cpu_top/src/InstructionMemory.v:29$51_DATA [28] $flatten\im.$memrd$\mem$/openlane/semi_cpu_top/src/InstructionMemory.v:29$51_DATA [23] $flatten\im.$memrd$\mem$/openlane/semi_cpu_top/src/InstructionMemory.v:29$51_DATA [20] $flatten\im.$memrd$\mem$/openlane/semi_cpu_top/src/InstructionMemory.v:29$51_DATA [17:16] $flatten\im.$memrd$\mem$/openlane/semi_cpu_top/src/InstructionMemory.v:29$51_DATA [2] } = { $flatten\im.$memrd$\mem$/openlane/semi_cpu_top/src/InstructionMemory.v:29$51_DATA [22] $flatten\im.$memrd$\mem$/openlane/semi_cpu_top/src/InstructionMemory.v:29$51_DATA [19] $flatten\im.$memrd$\mem$/openlane/semi_cpu_top/src/InstructionMemory.v:29$51_DATA [15] $flatten\im.$memrd$\mem$/openlane/semi_cpu_top/src/InstructionMemory.v:29$51_DATA [15:14] $flatten\im.$memrd$\mem$/openlane/semi_cpu_top/src/InstructionMemory.v:29$51_DATA [0] }
  Optimizing cells in module \semi_cpu_top.
    Consolidated identical input bits for $mux cell $flatten\im.$ternary$/openlane/semi_cpu_top/src/InstructionMemory.v:29$52:
      Old ports: A=20'00000000000000000000, B={ $flatten\im.$memrd$\mem$/openlane/semi_cpu_top/src/InstructionMemory.v:29$51_DATA [31:22] $flatten\im.$memrd$\mem$/openlane/semi_cpu_top/src/InstructionMemory.v:29$51_DATA [20:19] $flatten\im.$memrd$\mem$/openlane/semi_cpu_top/src/InstructionMemory.v:29$51_DATA [17:14] $flatten\im.$memrd$\mem$/openlane/semi_cpu_top/src/InstructionMemory.v:29$51_DATA [3:0] }, Y={ \instruction_tb [31:29] \id.instruction [28:22] \id.instruction [20:19] \id.instruction [17:14] \id.instruction [3:0] }
      New ports: A=14'00000000000000, B={ $flatten\im.$memrd$\mem$/openlane/semi_cpu_top/src/InstructionMemory.v:29$51_DATA [31:29] $flatten\im.$memrd$\mem$/openlane/semi_cpu_top/src/InstructionMemory.v:29$51_DATA [27:24] $flatten\im.$memrd$\mem$/openlane/semi_cpu_top/src/InstructionMemory.v:29$51_DATA [22] $flatten\im.$memrd$\mem$/openlane/semi_cpu_top/src/InstructionMemory.v:29$51_DATA [19] $flatten\im.$memrd$\mem$/openlane/semi_cpu_top/src/InstructionMemory.v:29$51_DATA [15:14] $flatten\im.$memrd$\mem$/openlane/semi_cpu_top/src/InstructionMemory.v:29$51_DATA [3] $flatten\im.$memrd$\mem$/openlane/semi_cpu_top/src/InstructionMemory.v:29$51_DATA [1:0] }, Y={ \instruction_tb [31:29] \id.instruction [27:24] \id.instruction [22] \id.instruction [19] \id.instruction [15:14] \id.instruction [3] \id.instruction [1:0] }
      New connections: { \id.instruction [28] \id.instruction [23] \id.instruction [20] \id.instruction [17:16] \id.instruction [2] } = { \id.instruction [22] \id.instruction [19] \id.instruction [15] \id.instruction [15:14] \id.instruction [0] }
  Optimizing cells in module \semi_cpu_top.
    Consolidated identical input bits for $mux cell $flatten\id.$procmux$111:
      Old ports: A=\id.instruction [17:14], B=4'0000, Y=\rf.ra2 [3:0]
      New ports: A=\id.instruction [15:14], B=2'00, Y=\rf.ra2 [1:0]
      New connections: \rf.ra2 [3:2] = \rf.ra2 [1:0]
    Consolidated identical input bits for $mux cell $flatten\id.$procmux$120:
      Old ports: A=4'0000, B={ \id.instruction [23:22] \id.instruction [20:19] }, Y={ \rf.ra1 [4:3] \rf.ra1 [1:0] }
      New ports: A=3'000, B={ \id.instruction [22] \id.instruction [15] \id.instruction [19] }, Y={ \rf.ra1 [3] \rf.ra1 [1:0] }
      New connections: \rf.ra1 [4] = \rf.ra1 [0]
    Consolidated identical input bits for $mux cell $flatten\id.$procmux$93:
      Old ports: A=8'00000000, B={ \id.instruction [17:14] \id.instruction [3:0] }, Y={ \alu.immediate [17:14] \alu.immediate [3:0] }
      New ports: A=5'00000, B={ \id.instruction [15:14] \id.instruction [3] \id.instruction [1:0] }, Y={ \alu.immediate [15:14] \alu.immediate [3] \alu.immediate [1:0] }
      New connections: { \alu.immediate [17:16] \alu.immediate [2] } = { \alu.immediate [15:14] \alu.immediate [0] }
  Optimizing cells in module \semi_cpu_top.
Performed a total of 27 changes.

43.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\semi_cpu_top'.
<suppressed ~15 debug messages>
Removed a total of 5 cells.

43.6. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $pmux $flatten\alu.$procmux$965 in front of them:
        $auto$alumacc.cc:485:replace_alu$1164
        $auto$alumacc.cc:485:replace_alu$1155
        $auto$alumacc.cc:485:replace_alu$1161
        $auto$alumacc.cc:485:replace_alu$1158

43.7. Executing OPT_DFF pass (perform DFF optimizations).

43.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \semi_cpu_top..
Removed 0 unused cells and 42 unused wires.
<suppressed ~1 debug messages>

43.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module semi_cpu_top.
<suppressed ~66 debug messages>

43.10. Rerunning OPT passes. (Maybe there is more to do..)

43.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \semi_cpu_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/31 on $pmux $flatten\rf.$procmux$129.
    dead port 2/31 on $pmux $flatten\rf.$procmux$129.
    dead port 3/31 on $pmux $flatten\rf.$procmux$129.
    dead port 4/31 on $pmux $flatten\rf.$procmux$129.
    dead port 5/31 on $pmux $flatten\rf.$procmux$129.
    dead port 6/31 on $pmux $flatten\rf.$procmux$129.
    dead port 7/31 on $pmux $flatten\rf.$procmux$129.
    dead port 8/31 on $pmux $flatten\rf.$procmux$129.
    dead port 9/31 on $pmux $flatten\rf.$procmux$129.
    dead port 10/31 on $pmux $flatten\rf.$procmux$129.
    dead port 11/31 on $pmux $flatten\rf.$procmux$129.
    dead port 12/31 on $pmux $flatten\rf.$procmux$129.
    dead port 13/31 on $pmux $flatten\rf.$procmux$129.
    dead port 14/31 on $pmux $flatten\rf.$procmux$129.
    dead port 15/31 on $pmux $flatten\rf.$procmux$129.
    dead port 16/31 on $pmux $flatten\rf.$procmux$129.
    dead port 18/31 on $pmux $flatten\rf.$procmux$129.
    dead port 19/31 on $pmux $flatten\rf.$procmux$129.
    dead port 20/31 on $pmux $flatten\rf.$procmux$129.
    dead port 21/31 on $pmux $flatten\rf.$procmux$129.
    dead port 23/31 on $pmux $flatten\rf.$procmux$129.
    dead port 24/31 on $pmux $flatten\rf.$procmux$129.
    dead port 25/31 on $pmux $flatten\rf.$procmux$129.
    dead port 26/31 on $pmux $flatten\rf.$procmux$129.
    dead port 28/31 on $pmux $flatten\rf.$procmux$129.
    dead port 29/31 on $pmux $flatten\rf.$procmux$129.
    dead port 30/31 on $pmux $flatten\rf.$procmux$129.
    dead port 1/31 on $pmux $flatten\rf.$procmux$162.
    dead port 2/31 on $pmux $flatten\rf.$procmux$162.
    dead port 3/31 on $pmux $flatten\rf.$procmux$162.
    dead port 4/31 on $pmux $flatten\rf.$procmux$162.
    dead port 6/31 on $pmux $flatten\rf.$procmux$162.
    dead port 8/31 on $pmux $flatten\rf.$procmux$162.
    dead port 9/31 on $pmux $flatten\rf.$procmux$162.
    dead port 10/31 on $pmux $flatten\rf.$procmux$162.
    dead port 11/31 on $pmux $flatten\rf.$procmux$162.
    dead port 12/31 on $pmux $flatten\rf.$procmux$162.
    dead port 14/31 on $pmux $flatten\rf.$procmux$162.
    dead port 16/31 on $pmux $flatten\rf.$procmux$162.
    dead port 17/31 on $pmux $flatten\rf.$procmux$162.
    dead port 18/31 on $pmux $flatten\rf.$procmux$162.
    dead port 19/31 on $pmux $flatten\rf.$procmux$162.
    dead port 20/31 on $pmux $flatten\rf.$procmux$162.
    dead port 21/31 on $pmux $flatten\rf.$procmux$162.
    dead port 23/31 on $pmux $flatten\rf.$procmux$162.
    dead port 25/31 on $pmux $flatten\rf.$procmux$162.
    dead port 26/31 on $pmux $flatten\rf.$procmux$162.
    dead port 27/31 on $pmux $flatten\rf.$procmux$162.
    dead port 28/31 on $pmux $flatten\rf.$procmux$162.
    dead port 29/31 on $pmux $flatten\rf.$procmux$162.
Removed 50 multiplexer ports.
<suppressed ~15 debug messages>

43.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \semi_cpu_top.
    New ctrl vector for $pmux cell $flatten\alu.$procmux$965: { $flatten\alu.$procmux$969_CMP $flatten\alu.$procmux$968_CMP $auto$opt_reduce.cc:134:opt_pmux$1256 }
  Optimizing cells in module \semi_cpu_top.
Performed a total of 1 changes.

43.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\semi_cpu_top'.
Removed a total of 0 cells.

43.14. Executing OPT_SHARE pass.

43.15. Executing OPT_DFF pass (perform DFF optimizations).

43.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \semi_cpu_top..
Removed 63 unused cells and 116 unused wires.
<suppressed ~85 debug messages>

43.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module semi_cpu_top.

43.18. Rerunning OPT passes. (Maybe there is more to do..)

43.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \semi_cpu_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~15 debug messages>

43.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \semi_cpu_top.
Performed a total of 0 changes.

43.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\semi_cpu_top'.
Removed a total of 0 cells.

43.22. Executing OPT_SHARE pass.

43.23. Executing OPT_DFF pass (perform DFF optimizations).

43.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \semi_cpu_top..

43.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module semi_cpu_top.

43.26. Finished OPT passes. (There is nothing left to do.)

44. Executing TECHMAP pass (map to technology primitives).

44.1. Executing Verilog-2005 frontend: /nix/store/sx2v0i73mn1ih2z1nk61pm9n5gjgpidy-yosys/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nix/store/sx2v0i73mn1ih2z1nk61pm9n5gjgpidy-yosys/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

44.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $sdff.
Using extmapper simplemap for cells of type $mux.
Using template $paramod$ce0ec84be7047712840b0952f343ee9e63ef75d1\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $eq.
Running "alumacc" on wrapper $extern:wrap:$neg:A_SIGNED=0:A_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$neg:A_SIGNED=0:A_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$neg:A_SIGNED=0:A_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $reduce_or.
Using template $paramod$a285b5a57fe61eabc57c91b8c412748ee1151a85\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $adffe.
Using template $paramod$49f1dc3dcd6d2c748486fe94c6744a34a19bbafe\_90_pmux for cells of type $pmux.
Using template $paramod$54d740639e1393b22262823179ff783ea9f17a35\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $reduce_bool.
Using template $paramod$constmap:b9a86d073741c2a0f7bb241e73c2dd11747f3288$paramod$56955d0f36f77738c952d3505dc563df3ee11b94\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod$constmap:b9a86d073741c2a0f7bb241e73c2dd11747f3288$paramod$dce7c1188cb25d2520d170426d59301c3b73f9e7\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod$fbc7873bff55778c0b3173955b7e4bce1d9d6834\_90_alu for cells of type $alu.
Using template $paramod$3ef7d3dd227da7627a99c5e5a6a4deb817573e39\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $sdffce.
Using template $paramod$c2e415ef15bc3ccd2723772353a6b450d3d76206\_90_pmux for cells of type $pmux.
Using template $paramod$175e67c02b86e96b1288b9dc100122520d7240d8\_90_alu for cells of type $alu.
Using template $paramod$constmap:4c7494b2c5c0f147e25410c76c1e148dfe36889c$paramod$40a7e82dfd2b3aaec6fb0e7d7da2240dec0fbdeb\_90_shift_shiftx for cells of type $shiftx.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $and.
Using template $paramod$c6baa65225090ac0a120feab1b920965244aa496\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010100 for cells of type $lcu.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100000 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000011 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000010 for cells of type $lcu.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~2570 debug messages>

45. Executing OPT pass (performing simple optimizations).

45.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module semi_cpu_top.
<suppressed ~1000 debug messages>

45.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\semi_cpu_top'.
<suppressed ~669 debug messages>
Removed a total of 223 cells.

45.3. Executing OPT_DFF pass (perform DFF optimizations).

45.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \semi_cpu_top..
Removed 95 unused cells and 1165 unused wires.
<suppressed ~96 debug messages>

45.5. Finished fast OPT passes.

46. Executing ABC pass (technology mapping using ABC).

46.1. Extracting gate netlist of module `\semi_cpu_top' to `<abc-temp-dir>/input.blif'..
Extracted 2213 gates and 2577 wires to a netlist network with 362 inputs and 167 outputs.

46.1.1. Executing ABC.
Running ABC command: "/nix/store/wq2q0njg3sx8wvj2akz7x1qxwyrv9xlr-yosys-abc/bin/abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

46.1.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:       87
ABC RESULTS:               MUX cells:      388
ABC RESULTS:             ORNOT cells:      132
ABC RESULTS:              XNOR cells:       14
ABC RESULTS:                OR cells:      430
ABC RESULTS:               NOR cells:       97
ABC RESULTS:              NAND cells:       33
ABC RESULTS:            ANDNOT cells:      808
ABC RESULTS:               AND cells:       27
ABC RESULTS:               XOR cells:      108
ABC RESULTS:        internal signals:     2048
ABC RESULTS:           input signals:      362
ABC RESULTS:          output signals:      167
Removing temp directory.

47. Executing OPT pass (performing simple optimizations).

47.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module semi_cpu_top.
<suppressed ~71 debug messages>

47.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\semi_cpu_top'.
<suppressed ~30 debug messages>
Removed a total of 10 cells.

47.3. Executing OPT_DFF pass (perform DFF optimizations).

47.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \semi_cpu_top..
Removed 2 unused cells and 1010 unused wires.
<suppressed ~6 debug messages>

47.5. Finished fast OPT passes.

48. Executing HIERARCHY pass (managing design hierarchy).

48.1. Analyzing design hierarchy..
Top module:  \semi_cpu_top

48.2. Analyzing design hierarchy..
Top module:  \semi_cpu_top
Removed 0 unused modules.

49. Printing statistics.

=== semi_cpu_top ===

   Number of wires:               2033
   Number of wire bits:           3170
   Number of public wires:          67
   Number of public wire bits:    1161
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2493
     $_ANDNOT_                     804
     $_AND_                         27
     $_DFFE_PP0N_                   32
     $_DFFE_PP0P_                  323
     $_DFF_P_                        4
     $_MUX_                        387
     $_NAND_                        33
     $_NOR_                         96
     $_NOT_                         85
     $_ORNOT_                      131
     $_OR_                         427
     $_SDFFCE_PN0N_                  2
     $_SDFF_PN0_                    20
     $_XNOR_                        14
     $_XOR_                        108

50. Executing CHECK pass (checking for obvious problems).
Checking module semi_cpu_top...
Found and reported 0 problems.

51. Generating Graphviz representation of design.
Writing dot description to `/openlane/semi_cpu_top/runs/RUN_2025.06.08_09.20.56/tmp/synthesis/post_techmap.dot'.
Dumping module semi_cpu_top to page 1.

52. Executing SHARE pass (SAT-based resource sharing).

53. Executing OPT pass (performing simple optimizations).

53.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module semi_cpu_top.

53.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\semi_cpu_top'.
Removed a total of 0 cells.

53.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \semi_cpu_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

53.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \semi_cpu_top.
Performed a total of 0 changes.

53.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\semi_cpu_top'.
Removed a total of 0 cells.

53.6. Executing OPT_DFF pass (perform DFF optimizations).

53.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \semi_cpu_top..

53.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module semi_cpu_top.

53.9. Finished OPT passes. (There is nothing left to do.)

54. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \semi_cpu_top..
Removed 0 unused cells and 42 unused wires.
<suppressed ~42 debug messages>

55. Printing statistics.

=== semi_cpu_top ===

   Number of wires:               1991
   Number of wire bits:           2563
   Number of public wires:          25
   Number of public wire bits:     554
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2493
     $_ANDNOT_                     804
     $_AND_                         27
     $_DFFE_PP0N_                   32
     $_DFFE_PP0P_                  323
     $_DFF_P_                        4
     $_MUX_                        387
     $_NAND_                        33
     $_NOR_                         96
     $_NOT_                         85
     $_ORNOT_                      131
     $_OR_                         427
     $_SDFFCE_PN0N_                  2
     $_SDFF_PN0_                    20
     $_XNOR_                        14
     $_XOR_                        108

mapping tbuf

56. Executing TECHMAP pass (map to technology primitives).

56.1. Executing Verilog-2005 frontend: /home/ceyhun/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/home/ceyhun/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

56.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

57. Executing SIMPLEMAP pass (map simple cells to gate primitives).

58. Executing TECHMAP pass (map to technology primitives).

58.1. Executing Verilog-2005 frontend: /home/ceyhun/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/home/ceyhun/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

58.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

59. Executing SIMPLEMAP pass (map simple cells to gate primitives).

60. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

60.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\semi_cpu_top':
  mapped 355 $_DFF_PN0_ cells to \sky130_fd_sc_hd__dfrtp_2 cells.
  mapped 26 $_DFF_P_ cells to \sky130_fd_sc_hd__dfxtp_2 cells.

61. Printing statistics.

=== semi_cpu_top ===

   Number of wires:               2725
   Number of wire bits:           3297
   Number of public wires:          25
   Number of public wire bits:     554
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               3227
     $_ANDNOT_                     804
     $_AND_                         27
     $_MUX_                        766
     $_NAND_                        33
     $_NOR_                         96
     $_NOT_                        440
     $_ORNOT_                      131
     $_OR_                         427
     $_XNOR_                        14
     $_XOR_                        108
     sky130_fd_sc_hd__dfrtp_2      355
     sky130_fd_sc_hd__dfxtp_2       26

[INFO]: USING STRATEGY AREA 0

62. Executing ABC pass (technology mapping using ABC).

62.1. Extracting gate netlist of module `\semi_cpu_top' to `/tmp/yosys-abc-C7f56u/input.blif'..
Extracted 2846 gates and 3226 wires to a netlist network with 379 inputs and 829 outputs.

62.1.1. Executing ABC.
Running ABC command: "/nix/store/wq2q0njg3sx8wvj2akz7x1qxwyrv9xlr-yosys-abc/bin/abc" -s -f /tmp/yosys-abc-C7f56u/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-C7f56u/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-C7f56u/input.blif 
ABC: + read_lib -w /openlane/semi_cpu_top/runs/RUN_2025.06.08_09.20.56/tmp/synthesis/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.04 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130A_merged" from "/openlane/semi_cpu_top/runs/RUN_2025.06.08_09.20.56/tmp/synthesis/trimmed.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.06 sec
ABC: Memory =    9.54 MB. Time =     0.06 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /openlane/semi_cpu_top/runs/RUN_2025.06.08_09.20.56/tmp/synthesis/synthesis.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2".
ABC: Setting output load to be 33.442001.
ABC: + read_constr /openlane/semi_cpu_top/runs/RUN_2025.06.08_09.20.56/tmp/synthesis/synthesis.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + retime -D -D 10000 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 10000 
ABC: + &get -n 
ABC: + &st 
ABC: + &dch 
ABC: + &nf 
ABC: + &put 
ABC: + buffer -N 10 -S 750.0 
ABC: + upsize -D 10000 
ABC: Current delay (6723.09 ps) does not exceed the target delay (10000.00 ps). Upsizing is not performed.
ABC: + dnsize -D 10000 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =   1960 ( 56.2 %)   Cap = 16.2 ff ( 11.7 %)   Area =    12027.79 ( 43.5 %)   Delay =  7041.24 ps  (  3.6 %)               
ABC: Path  0 --      97 : 0   10 pi                        A =   0.00  Df =  91.7  -49.6 ps  S = 135.1 ps  Cin =  0.0 ff  Cout =  28.4 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --    1754 : 4    1 sky130_fd_sc_hd__and4bb_2 A =  12.51  Df = 325.3  -11.1 ps  S =  48.3 ps  Cin =  1.5 ff  Cout =   2.2 ff  Cmax = 270.1 ff  G =  139  
ABC: Path  2 --    1755 : 1    8 sky130_fd_sc_hd__buf_1    A =   3.75  Df = 580.5  -81.6 ps  S = 311.7 ps  Cin =  2.1 ff  Cout =  26.0 ff  Cmax = 130.0 ff  G = 1174  
ABC: Path  3 --    1793 : 4    1 sky130_fd_sc_hd__a22o_2   A =  10.01  Df = 781.1   -3.7 ps  S =  38.5 ps  Cin =  2.3 ff  Cout =   2.2 ff  Cmax = 301.2 ff  G =   89  
ABC: Path  4 --    1794 : 1    6 sky130_fd_sc_hd__buf_1    A =   3.75  Df =1257.1 -184.6 ps  S = 627.0 ps  Cin =  2.1 ff  Cout =  53.6 ff  Cmax = 130.0 ff  G = 2503  
ABC: Path  5 --    1798 : 4    3 sky130_fd_sc_hd__or4_2    A =   8.76  Df =1797.2 -295.3 ps  S = 106.7 ps  Cin =  1.5 ff  Cout =   4.6 ff  Cmax = 310.4 ff  G =  289  
ABC: Path  6 --    1929 : 4    1 sky130_fd_sc_hd__or4_2    A =   8.76  Df =2458.9 -566.5 ps  S =  94.5 ps  Cin =  1.5 ff  Cout =   2.2 ff  Cmax = 310.4 ff  G =  140  
ABC: Path  7 --    1930 : 1    7 sky130_fd_sc_hd__buf_1    A =   3.75  Df =2677.2 -483.7 ps  S = 370.8 ps  Cin =  2.1 ff  Cout =  31.2 ff  Cmax = 130.0 ff  G = 1410  
ABC: Path  8 --    1935 : 3    1 sky130_fd_sc_hd__or3_2    A =   7.51  Df =3130.2 -744.2 ps  S =  84.0 ps  Cin =  1.5 ff  Cout =   4.6 ff  Cmax = 310.4 ff  G =  292  
ABC: Path  9 --    1937 : 3    2 sky130_fd_sc_hd__a21oi_2  A =   8.76  Df =3288.5 -371.5 ps  S = 140.4 ps  Cin =  4.6 ff  Cout =   7.3 ff  Cmax = 128.2 ff  G =  147  
ABC: Path 10 --    1941 : 3    2 sky130_fd_sc_hd__nor3_2   A =  10.01  Df =3336.4 -302.5 ps  S = 129.0 ps  Cin =  4.4 ff  Cout =   2.9 ff  Cmax =  92.5 ff  G =   63  
ABC: Path 11 --    1942 : 4    3 sky130_fd_sc_hd__or4_2    A =   8.76  Df =3891.1 -297.8 ps  S = 107.2 ps  Cin =  1.5 ff  Cout =   4.7 ff  Cmax = 310.4 ff  G =  298  
ABC: Path 12 --    1985 : 4    1 sky130_fd_sc_hd__or4_2    A =   8.76  Df =4553.9 -861.2 ps  S =  94.9 ps  Cin =  1.5 ff  Cout =   2.4 ff  Cmax = 310.4 ff  G =  151  
ABC: Path 13 --    1988 : 5    2 sky130_fd_sc_hd__a311o_2  A =  11.26  Df =4921.5-1133.4 ps  S =  56.9 ps  Cin =  2.3 ff  Cout =   4.0 ff  Cmax = 298.5 ff  G =  168  
ABC: Path 14 --    2007 : 3    6 sky130_fd_sc_hd__a21o_2   A =   8.76  Df =5160.6-1117.1 ps  S = 127.8 ps  Cin =  2.4 ff  Cout =  23.8 ff  Cmax = 309.5 ff  G =  970  
ABC: Path 15 --    2071 : 4    3 sky130_fd_sc_hd__o31ai_2  A =  12.51  Df =5507.9 -717.7 ps  S = 314.3 ps  Cin =  4.4 ff  Cout =  11.6 ff  Cmax =  80.6 ff  G =  255  
ABC: Path 16 --    2304 : 2    3 sky130_fd_sc_hd__nand2_2  A =   6.26  Df =5636.6 -743.4 ps  S = 109.0 ps  Cin =  4.4 ff  Cout =  14.3 ff  Cmax = 295.7 ff  G =  308  
ABC: Path 17 --    2305 : 3    2 sky130_fd_sc_hd__a21oi_2  A =   8.76  Df =5793.9 -839.2 ps  S =  94.7 ps  Cin =  4.6 ff  Cout =   4.0 ff  Cmax = 128.2 ff  G =   83  
ABC: Path 18 --    2306 : 2    3 sky130_fd_sc_hd__or2b_2   A =   8.76  Df =6115.6 -986.8 ps  S =  69.6 ps  Cin =  1.6 ff  Cout =   9.1 ff  Cmax = 312.2 ff  G =  556  
ABC: Path 19 --    2307 : 3    1 sky130_fd_sc_hd__and3_2   A =   7.51  Df =6334.0-1025.8 ps  S =  53.6 ps  Cin =  1.5 ff  Cout =   4.7 ff  Cmax = 309.5 ff  G =  294  
ABC: Path 20 --    2316 : 4    2 sky130_fd_sc_hd__o31ai_2  A =  12.51  Df =6544.1 -217.9 ps  S = 180.8 ps  Cin =  4.4 ff  Cout =   3.6 ff  Cmax =  80.6 ff  G =   77  
ABC: Path 21 --    2317 : 3    1 sky130_fd_sc_hd__mux2_2   A =  11.26  Df =6717.9 -121.5 ps  S =  46.0 ps  Cin =  2.3 ff  Cout =   2.2 ff  Cmax = 297.6 ff  G =   92  
ABC: Path 22 --    2318 : 1    1 sky130_fd_sc_hd__buf_1    A =   3.75  Df =7041.2 -225.7 ps  S = 396.8 ps  Cin =  2.1 ff  Cout =  33.4 ff  Cmax = 130.0 ff  G = 1590  
ABC: Start-point = pi96 (\pc_out_tb [2]).  End-point = po264 ($auto$rtlil.cc:2684:MuxGate$9555).
ABC: + print_stats -m 
ABC: netlist                       : i/o =  379/  829  lat =    0  nd =  1960  edge =   3539  area =12025.28  delay =23.00  lev = 23
ABC: + write_blif /tmp/yosys-abc-C7f56u/output.blif 

62.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__and4bb_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and4_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or4b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a311o_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o211a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a22oi_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__o41a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and3b_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o2bb2a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o21ba_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__o31ai_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__o22a_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__nand3_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a221o_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a211o_2 cells:        8
ABC RESULTS:   sky130_fd_sc_hd__o221a_2 cells:        9
ABC RESULTS:   sky130_fd_sc_hd__a311oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o311a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a21boi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a211oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o32ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o22ai_2 cells:        8
ABC RESULTS:   sky130_fd_sc_hd__or3_2 cells:       20
ABC RESULTS:   sky130_fd_sc_hd__or3b_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a21o_2 cells:       27
ABC RESULTS:   sky130_fd_sc_hd__o32a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o21a_2 cells:       21
ABC RESULTS:          _const0_ cells:        2
ABC RESULTS:   sky130_fd_sc_hd__mux4_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__a21bo_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a32o_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__nor3_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__a22o_2 cells:       64
ABC RESULTS:   sky130_fd_sc_hd__o31a_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__o21bai_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__or2b_2 cells:        8
ABC RESULTS:   sky130_fd_sc_hd__or4bb_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__or4_2 cells:       20
ABC RESULTS:   sky130_fd_sc_hd__and2b_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__o21ai_2 cells:       36
ABC RESULTS:   sky130_fd_sc_hd__a31o_2 cells:       20
ABC RESULTS:   sky130_fd_sc_hd__xor2_2 cells:       13
ABC RESULTS:   sky130_fd_sc_hd__and3_2 cells:       23
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:       37
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:       44
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:       81
ABC RESULTS:   sky130_fd_sc_hd__and2_2 cells:      115
ABC RESULTS:   sky130_fd_sc_hd__xnor2_2 cells:       27
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:      393
ABC RESULTS:   sky130_fd_sc_hd__mux2_2 cells:      142
ABC RESULTS:   sky130_fd_sc_hd__buf_1 cells:      708
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:       52
ABC RESULTS:   sky130_fd_sc_hd__a2bb2o_2 cells:        6
ABC RESULTS:        internal signals:     2018
ABC RESULTS:           input signals:      379
ABC RESULTS:          output signals:      829
Removing temp directory.

63. Executing SETUNDEF pass (replace undef values with defined constants).

64. Executing HILOMAP pass (mapping to constant drivers).

65. Executing SPLITNETS pass (splitting up multi-bit signals).

66. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \semi_cpu_top..
Removed 783 unused cells and 4068 unused wires.
<suppressed ~1008 debug messages>

67. Executing INSBUF pass (insert buffer cells for connected wires).
Add semi_cpu_top/$auto$insbuf.cc:97:execute$12655: \immediate_tb [2] -> \immediate_tb [0]
Add semi_cpu_top/$auto$insbuf.cc:97:execute$12656: \immediate_tb [16] -> \immediate_tb [14]
Add semi_cpu_top/$auto$insbuf.cc:97:execute$12657: \immediate_tb [17] -> \immediate_tb [15]
Add semi_cpu_top/$auto$insbuf.cc:97:execute$12658: \instruction_tb [2] -> \instruction_tb [0]
Add semi_cpu_top/$auto$insbuf.cc:97:execute$12659: \instruction_tb [16] -> \instruction_tb [14]
Add semi_cpu_top/$auto$insbuf.cc:97:execute$12660: \instruction_tb [20] -> \instruction_tb [15]
Add semi_cpu_top/$auto$insbuf.cc:97:execute$12661: \instruction_tb [20] -> \instruction_tb [17]
Add semi_cpu_top/$auto$insbuf.cc:97:execute$12662: \instruction_tb [23] -> \instruction_tb [19]
Add semi_cpu_top/$auto$insbuf.cc:97:execute$12663: \instruction_tb [28] -> \instruction_tb [22]

68. Executing CHECK pass (checking for obvious problems).
Checking module semi_cpu_top...
Found and reported 0 problems.

69. Printing statistics.

=== semi_cpu_top ===

   Number of wires:               1438
   Number of wire bits:           1606
   Number of public wires:         162
   Number of public wire bits:     330
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1603
     sky130_fd_sc_hd__a211o_2        8
     sky130_fd_sc_hd__a211oi_2       1
     sky130_fd_sc_hd__a21bo_2        1
     sky130_fd_sc_hd__a21boi_2       1
     sky130_fd_sc_hd__a21o_2        27
     sky130_fd_sc_hd__a21oi_2       37
     sky130_fd_sc_hd__a221o_2        3
     sky130_fd_sc_hd__a22o_2        64
     sky130_fd_sc_hd__a22oi_2        5
     sky130_fd_sc_hd__a2bb2o_2       6
     sky130_fd_sc_hd__a311o_2        2
     sky130_fd_sc_hd__a311oi_2       1
     sky130_fd_sc_hd__a31o_2        20
     sky130_fd_sc_hd__a32o_2         4
     sky130_fd_sc_hd__and2_2       115
     sky130_fd_sc_hd__and2b_2        7
     sky130_fd_sc_hd__and3_2        23
     sky130_fd_sc_hd__and3b_2        2
     sky130_fd_sc_hd__and4_2         1
     sky130_fd_sc_hd__and4bb_2       1
     sky130_fd_sc_hd__buf_1        309
     sky130_fd_sc_hd__buf_2          9
     sky130_fd_sc_hd__conb_1        38
     sky130_fd_sc_hd__dfrtp_2      163
     sky130_fd_sc_hd__dfxtp_2       26
     sky130_fd_sc_hd__inv_2        201
     sky130_fd_sc_hd__mux2_2       142
     sky130_fd_sc_hd__mux4_2         5
     sky130_fd_sc_hd__nand2_2       81
     sky130_fd_sc_hd__nand3_2        1
     sky130_fd_sc_hd__nor2_2        44
     sky130_fd_sc_hd__nor3_2         7
     sky130_fd_sc_hd__o211a_2        1
     sky130_fd_sc_hd__o21a_2        21
     sky130_fd_sc_hd__o21ai_2       36
     sky130_fd_sc_hd__o21ba_2        7
     sky130_fd_sc_hd__o21bai_2       2
     sky130_fd_sc_hd__o221a_2        9
     sky130_fd_sc_hd__o22a_2         4
     sky130_fd_sc_hd__o22ai_2        8
     sky130_fd_sc_hd__o2bb2a_2       1
     sky130_fd_sc_hd__o311a_2        1
     sky130_fd_sc_hd__o31a_2         4
     sky130_fd_sc_hd__o31ai_2        6
     sky130_fd_sc_hd__o32a_2         1
     sky130_fd_sc_hd__o32ai_2        1
     sky130_fd_sc_hd__o41a_2         1
     sky130_fd_sc_hd__or2_2         52
     sky130_fd_sc_hd__or2b_2         8
     sky130_fd_sc_hd__or3_2         20
     sky130_fd_sc_hd__or3b_2         2
     sky130_fd_sc_hd__or4_2         20
     sky130_fd_sc_hd__or4b_2         1
     sky130_fd_sc_hd__or4bb_2        2
     sky130_fd_sc_hd__xnor2_2       27
     sky130_fd_sc_hd__xor2_2        13

   Chip area for module '\semi_cpu_top': 14832.976000

70. Executing Verilog backend.
Dumping module `\semi_cpu_top'.

71. Executing JSON backend.

Warnings: 2 unique messages, 2 total
End of script. Logfile hash: 7ed0163f8b, CPU: user 0.54s system 0.51s, MEM: 43.89 MB peak
Yosys 0.38 (git sha1 543faed9c8c, clang++ 17.0.6 -fPIC -Os)
Time spent: 62% 2x abc (1 sec), 7% 33x opt_expr (0 sec), ...
